{"version":3,"sources":["hexapod/constants.js","hexapod/Vector.js","hexapod/geometry.js","templates/hexapodParams.js","templates/plotParams.js","hexapod/Hexagon.js","hexapod/Linkage.js","hexapod/solvers/orient/orientSolverHelpers.js","hexapod/solvers/orient/orientSolverGeneral.js","hexapod/solvers/orient/orientSolverSpecific.js","hexapod/solvers/twistSolver.js","hexapod/VirtualHexapod.js","hexapod/solvers/ik/IKInfo.js","hexapod/solvers/ik/LinkageIKSolver.js","hexapod/solvers/ik/HexapodSupportCheck.js","hexapod/solvers/ik/IKSolver.js","hexapod/solvers/ik/hexapodSolver.js","hexapod/plotter.js","components/vars.js","components/Nav.js","components/HexapodPlot.js","components/generic/NumberInputField.js","components/generic/SmallWidgets.js","components/DimensionsWidget.js","components/generic/Slider.js","components/pages/LegPoseWidgets.js","components/pages/ForwardKinematicsPage.js","components/pages/PoseTable.js","components/pages/InverseKinematicsPage.js","components/pages/LandingPage.js","components/pages/LegPatternPage.js","hexapod/solvers/walkSequenceSolver.js","components/pages/WalkingGaitsPage.js","App.js","serviceWorker.js","index.js"],"names":["LEG_POINT_TYPES_LIST","POSITION_NAME_TO_ID_MAP","rightMiddle","rightFront","leftFront","leftMiddle","leftBack","rightBack","POSITION_NAMES_LIST","MAX_ANGLES","POSITION_NAME_TO_AXIS_ANGLE_MAP","POSITION_NAME_TO_IS_LEFT_MAP","Vector","x","y","z","name","id","this","transformMatrix","slice","r0","r1","r2","r00","r01","r02","tx","r10","r11","r12","ty","r20","r21","r22","tz","newX","newY","newZ","newTrot","cloneTrot","cloneShift","toFixed","degrees","thetaRadians","Math","PI","radians","thetaDegrees","dot","a","b","vectorLength","v","sqrt","isCounterClockwise","n","cross","vectorFromTo","scaleVector","d","getNormalofThreePoints","c","ab","ac","len_n","acosDegrees","ratio","acos","isNaN","angleOppositeOfLastSide","angleBetween","cosTheta","getSinCos","theta","sin","cos","IDENTITY_MATRIX_4x4","uniformMatrix4x4","dRow","add","multiply","operate4x4","matrixA","matrixB","operation","resultMatrix","i","j","call","add4x4","multiply4x4","tRotYmatrix","s","tRotZmatrix","tRotXYZmatrix","xTheta","yTheta","zTheta","rx","tRotXmatrix","ry","rz","rxy","matrixToAlignVectorAtoB","p","vx","vx2","dMatrix","dvx2","temp","DEFAULT_DIMENSIONS","front","side","middle","coxia","femur","tibia","DEFAULT_POSE","alpha","beta","gamma","DEFAULT_PATTERN_PARAMS","DEFAULT_IK_PARAMS","hipStance","legStance","DEFAULT_GAIT_PARAMS","hipSwing","liftSwing","stepCount","DATA","showlegend","type","opacity","color","line","width","marker","size","mode","CAMERA_VIEW","center","eye","up","SCENE","xaxis","nticks","range","zerolinecolor","showbackground","yaxis","zaxis","backgroundcolor","aspectmode","aspectratio","camera","LAYOUT","scene","margin","l","r","t","paper_bgcolor","legend","bgcolor","font","family","autosize","Hexagon","dimensions","flags","hasNoPoints","vertexX","vertexY","verticesList","map","position","head","cog","_doTransform","transformFunction","args","clone","point","Linkage","originPoint","pose","_buildNameId","pointName","_buildPointNameIds","pointType","index","Object","assign","allPointsList","_computePoints","newPointsList","oldPoint","_buildClone","bodyContactPoint","matrix01","matrix12","matrix23","matrix02","matrix03","localPoints","pointNameIds","twistMatrix","localPoint","_computePointsWrtBodyContact","_computePointsWrtHexapodCog","reversedList","reverse","testPoint","reduce","isLower","normal","height","tol","findLegsOnGround","legs","legsOnGround","leg","some","sameHeight","_height","abs","SOME_LEG_ID_TRIOS","ADJACENT_LEG_ID_TRIOS","isStable","p0","p1","p2","u","w","n2","minVal","maxVal","cond0","cond1","cond2","shuffleArray","array","length","floor","random","JOINT_INDEX_TRIOS","jointIdTrios","k","push","makeJointIndexTrios","computeOrientationProperties","legsNoGravity","shuffle","someLegTrios","legIndexTrios","fallback","threeLegIndices","getTwoLegSets","threeLegs","otherThreeLegs","threeJointIndices","getThreePoints","anotherPointOfSameLegIsLower","anotherPointofOtherLegsIsLower","groundLegsNoGravity","nAxis","jointId","sixLegs","Array","keys","filter","includes","jointIndex","otherPoint","LEG_ID_TRIOS","result","computePlaneProperties","maybeGroundContactPoints","maybeGroundContactPoint","legTrio","every","footTip","mightTwist","negativeAlphaCount","positiveAlphaCount","footTipIsOnGround","split","changedAlpha","simpleTwist","firstLeg","allPointTypes","firstPointType","femurPoint","DEFAULT_LOCAL_AXES","xAxis","yAxis","zAxis","transformLocalAxes","localAxes","buildLegsList","bodyContactPoints","legDimensions","VirtualHexapod","assumeKnownGroundPoints","wontRotate","flatHexagon","bodyDimensions","solved","oSolverSpecific","oSolverGeneral","foundSolution","legPositionsOnGround","cloneTrotShift","body","twistAngle","maybeTwistAngle","_handleComplexTwist","_twist","defaultPoints","currentPoints","currentSamePoint","find","undefined","samePointPosition","defaultSamePoint","atan2","complexTwist","groundContactPoints","isAlert","subject","IKMessage","success","successLegsOnAir","bulletPoints","noSupport","reason","listLegs","badPoint","toMarkdownString","elements","msg","badLeg","message","alphaNotInRange","maxAngle","initialized","LegIKInfo","targetReached","legPosition","obtainedSolution","reachedTarget","targetNotReached","blocked","femurTooLong","tibiaTooLong","LinkageIKSolver","vectors","legXaxis","parsVector","points","coxiaPoint","targetFootTipPoint","summa","pars","angles","rho","info","_computeTargetFootTipPoint","_handleCaseTriangleCanForm","_handleEdgeCase","px","pz","phi","epsi","femurPointZ","console","log","HexapodSupportCheck","MIGHT_BE_STABLE_LESS","TOO_MANY_LEGS_OFF","RIGHT_LEGS_OFF","LEFT_LEGS_OFF","MIGHT_BE_STABLE_MORE","checkSupport","legsNamesoffGround","legLeftOrRight","isLeft","IKSolver","params","partialPose","legPositionsOffGround","axes","_hasBadVertex","known","computeInitialLegProperties","_handleBadPoint","legXaxisAngle","computeAlpha","coxiaUnitVector","_finalizeFailure","solvedLegParams","solve","_hasNoMoreSupport","_finalizeSuccess","vertex","hasLegsOffGround","groundContactPoint","bodyToFootVector","coxiaDirectionVector","tempVector","projectedVectorOntoPlane","coxiaVector","solveHexapodParams","rawIKparams","rotateThenShift","convertIKparams","tVec","rotMatrix","startPose","startHexapod","targets","buildHexapodTargets","rawParams","IKparams","entries","key","val","Number","convertFromPercentToTranslateValues","betaAndGamma","buildStartPose","hexapod","rotateShiftHexapodgivenPivots","points1","points2","targetVector","target","currentVector","current","twistAngleAbsolute","twistedCurrentPoint1","translateVector","findTwoPivotPoints","targetPoints","excludedPositions","targetPointsMap","acc","targetPointNames","currentPoint1","currentPoint2","targetPoint1","targetPoint2","currentPoint","currentName","foundTwoPoints","solveInverseKinematics","ikSolver","target_groundContactPoints","currentHexapod","pivots","getNewPlotParams","cameraView","data","polygonVertices","closedPointsList","bodyX","bodyY","bodyZ","cogProjection","dBodyMesh","dBodyOutline","dHead","dCog","dCogProjection","dLegs","dSupportPolygon","axisScale","hXaxis","hYaxis","hZaxis","wXaxis","wYaxis","wZaxis","_drawHexapod","values","sum","dimension","newRange","SECTION_NAMES","PATH_NAMES","ANGLE_NAMES","DIMENSION_NAMES","LEG_NAMES","IK_SLIDERS_LABELS","GAIT_SLIDER_LABELS","rangeParams","absVal","stepVal","RANGES","30","45","60","90","180","translateInputs","RANGE_PARAMS","dimensionInputs","Infinity","GAIT_RANGE_PARAMS","defaultVal","ICON_COMPONENTS","mug","className","circle","square","octocat","check","times","home","PATHS","inverseKinematics","path","description","icon","forwardKinematics","legPatterns","landingPage","walkingGaits","PATH_LINKS","URL_LINKS","url","LANDING_PAGE_MESSAGE","BulletPageLink","link","showDesc","to","BulletUrlLink","href","rel","children","NavBullets","NavDetailed","Nav","Plot","createPlotlyComponent","Plotly","HexapodPlot","props","layout","onRelayout","revision","config","displaylogo","responsive","style","useResizeHandler","InputField","state","myRef","React","createRef","setState","value","validity","badInput","rangeOverflow","rangeUnderflow","stepMismatch","checkValidity","numberValue","parseFloat","handleChange","newId","input","ref","min","max","step","htmlFor","onChange","e","Component","AlertBox","source","ToggleSwitch","showValue","Card","title","other","BasicButton","handleClick","onClick","ResetButton","reset","DimensionsWidget","sectionName","isFine","onUpdate","toggleMode","updateFieldState","updateDimensions","render","toggleSwitch","NumberInputFields","numberInputFields","NumberInputField","Slider","sliderList","names","LegPoseWidget","angle","fields","renderStacked","WidgetType","ForwardKinematicsPage","pageName","componentDidMount","onMount","updatePose","newPose","legPoseWidget","renderToString","POSITION_ALIAS","poseTable","formattedPose","alias","formatPose","markdownMessage","rm","rf","lf","lm","lb","rb","poseMessage","InverseKinematicsPage","ikParams","errorMessage","updateHexapodPlot","updateIkParams","sliders","additionalInfo","PoseTable","LandingPage","LegPatternPage","patternParams","updatePatternPose","tripodSequence","aLiftSwing","hipSwings","walkMode","buildTripodSequences","forwardAlphaSeqs","liftBetaSeqs","liftGammaSeqs","doubleStepCount","tripodA","tripodASequence","tripodB","tripodBSequence","sequences","forward","gammaLiftUp","betaLiftUp","gammaSeq","fillArray","betaSeq","rippleSequence","legPositions","forEach","betaLift","buildSequence","gammaLift","delta","fw1","fw2","halfDelta","bk1","bk2","bk3","bk4","buildRippleLegSequence","bLift","gLift","revGLift","revBLift","b0","g0","bN","gN","moduloMap","modSequence","mod","seq","flat","deltaAlpha","startVal","currentItem","getHipSwingForward","aHipSwing","getHipSwingRotate","len","concat","getWalkSequence","gaitType","getPose","newSequences","newSwitch","switches","switch1","switch2","switch3","paddingBottom","countSteps","sequence","WalkingGaitsPage","currentTwist","walkSequence","gaitParams","isAnimating","isTripodGait","isForward","inWalkMode","showGaitWidgets","animationCount","setWalkSequence","componentWillUnmount","clearInterval","intervalID","animate","tempStep","deltaTwist","twist","matrix","updateGaitParams","toggleWalkMode","toggleGaitType","toggleWidgets","toggleDirection","toggleAnimating","setInterval","animationControlSwitches","animatingSwitch","widgetsSwitch","gaitControlSwitches","gaitTypeSwitch","directionSwitch","rotateSwitch","hidden","ReactGA","initialize","debug","testMode","process","gaOptions","siteSpeedSampleRate","App","plot","defaults","inHexapodPage","hexapodDimensions","hexapodPose","onPageLoad","pageview","window","location","pathname","search","updatePlot","updatePlotWithHexapod","logCameraView","relayoutData","newHexapodModel","hexapodPlot","navDetailed","pageComponent","pageLanding","pagePatterns","pageIk","hexapodParams","pageFk","pageWalking","page","exact","component","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.cb689fd5.chunk.js","sourcesContent":["const LEG_POINT_TYPES_LIST = [\n    \"bodyContactPoint\",\n    \"coxiaPoint\",\n    \"femurPoint\",\n    \"footTipPoint\",\n]\n\nconst POSITION_NAME_TO_ID_MAP = {\n    rightMiddle: 0,\n    rightFront: 1,\n    leftFront: 2,\n    leftMiddle: 3,\n    leftBack: 4,\n    rightBack: 5,\n}\n\nconst POSITION_NAMES_LIST = [\n    \"rightMiddle\",\n    \"rightFront\",\n    \"leftFront\",\n    \"leftMiddle\",\n    \"leftBack\",\n    \"rightBack\",\n]\n\nconst ANGLE_NAMES_LIST = [\"alpha\", \"beta\", \"gamma\"]\n\nconst MAX_ANGLES = {\n    alpha: 90,\n    beta: 180,\n    gamma: 180,\n}\n\n/*\n\n   hexapodYaxis\n       ^\n       |\n       |\n       *-----> hexapodXaxis\n      / (cog)\n     /\n  hexapodZaxis\n\n  Relative x-axis, for each attached linkage\n\n  (+135)  x2          x1 (+45)\n           \\   head  /\n            *---*---*\n           /    |    \\\n          /     |     \\\n (+180)  /      |      \\\n   x3 --*------cog------*-- x0 (+0)\n         \\      |      /\n          \\     |     /\n           \\    |    /\n            *---*---*\n           /         \\\n         x4           x5\n      (+225)        (+315)\n */\nconst POSITION_NAME_TO_AXIS_ANGLE_MAP = {\n    rightMiddle: 0,\n    rightFront: 45,\n    leftFront: 135,\n    leftMiddle: 180,\n    leftBack: 225,\n    rightBack: 315,\n}\n\nconst POSITION_NAME_TO_IS_LEFT_MAP = {\n    rightMiddle: false,\n    rightFront: false,\n    leftFront: true,\n    leftMiddle: true,\n    leftBack: true,\n    rightBack: false,\n}\n\nconst NUMBER_OF_LEGS = 6\n\nexport {\n    ANGLE_NAMES_LIST,\n    LEG_POINT_TYPES_LIST,\n    POSITION_NAME_TO_ID_MAP,\n    POSITION_NAME_TO_AXIS_ANGLE_MAP,\n    POSITION_NAMES_LIST,\n    NUMBER_OF_LEGS,\n    POSITION_NAME_TO_IS_LEFT_MAP,\n    MAX_ANGLES,\n}\n","class Vector {\n    constructor(x, y, z, name = \"no-name-point\", id = \"no-id-point\") {\n        this.x = x\n        this.y = y\n        this.z = z\n        this.name = name\n        this.id = id\n    }\n\n    newTrot(transformMatrix, name = \"unnamed-point\", id = \"no-id\") {\n        // given point `point` location wrt a local axes\n        // coordinate frame\n        // find point in a global axes coordinate frame\n        // where the local axes wrt the global frame is defined by\n        // parameter transformMatrix\n        const [r0, r1, r2] = transformMatrix.slice(0, 3)\n        const [r00, r01, r02, tx] = r0\n        const [r10, r11, r12, ty] = r1\n        const [r20, r21, r22, tz] = r2\n\n        const newX = this.x * r00 + this.y * r01 + this.z * r02 + tx\n        const newY = this.x * r10 + this.y * r11 + this.z * r12 + ty\n        const newZ = this.x * r20 + this.y * r21 + this.z * r22 + tz\n        return new Vector(newX, newY, newZ, name, id)\n    }\n\n    cloneTrot(transformMatrix) {\n        return this.newTrot(transformMatrix, this.name, this.id)\n    }\n\n    cloneShift(tx, ty, tz) {\n        return new Vector(this.x + tx, this.y + ty, this.z + tz, this.name, this.id)\n    }\n\n    cloneTrotShift(transformMatrix, tx, ty, tz) {\n        return this.cloneTrot(transformMatrix).cloneShift(tx, ty, tz)\n    }\n\n    toMarkdownString() {\n        const x = this.x.toFixed(2)\n        const y = this.y.toFixed(2)\n        const z = this.z.toFixed(2)\n        const markdownString = `${this.name}\\n\\n(x: ${x}, y: ${y}, z: ${z})`\n        return markdownString\n    }\n}\n\nexport default Vector\n","import Vector from \"./Vector\"\n\nconst degrees = thetaRadians => (thetaRadians * 180) / Math.PI\n\nconst radians = thetaDegrees => (thetaDegrees * Math.PI) / 180\n\nconst isTriangle = (a, b, c) => a + b > c && a + c > b && b + c > a\n\nconst dot = (a, b) => a.x * b.x + a.y * b.y + a.z * b.z\n\nconst vectorLength = v => Math.sqrt(dot(v, v))\n\nconst isCounterClockwise = (a, b, n) => dot(a, cross(b, n)) > 0\n\nconst vectorFromTo = (a, b) => new Vector(b.x - a.x, b.y - a.y, b.z - a.z)\n\nconst scaleVector = (v, d) => new Vector(d * v.x, d * v.y, d * v.z)\n\nconst addVectors = (a, b) => new Vector(a.x + b.x, a.y + b.y, a.z + b.z)\n\nconst getUnitVector = v => scaleVector(v, 1 / vectorLength(v))\n\nconst cross = (a, b) => {\n    const x = a.y * b.z - a.z * b.y\n    const y = a.z * b.x - a.x * b.z\n    const z = a.x * b.y - a.y * b.x\n    return new Vector(x, y, z)\n}\n\nconst getNormalofThreePoints = (a, b, c) => {\n    const ab = vectorFromTo(a, b)\n    const ac = vectorFromTo(a, c)\n    const n = cross(ab, ac)\n    const len_n = vectorLength(n)\n    const unit_n = scaleVector(n, 1 / len_n)\n\n    return unit_n\n}\n\nconst acosDegrees = ratio => {\n    const thetaRadians = Math.acos(ratio)\n\n    // mimicks behavior of python numpy acos\n    if (isNaN(thetaRadians)) {\n        return 0\n    }\n\n    return degrees(thetaRadians)\n}\n\nconst angleOppositeOfLastSide = (a, b, c) => {\n    if (a === 0 || b === 0) {\n        return null\n    }\n\n    const cosTheta = (a * a + b * b - c * c) / (2 * a * b)\n    return acosDegrees(cosTheta)\n}\n\nconst angleBetween = (a, b) => {\n    if (vectorLength(a) === 0 || vectorLength(b) === 0) {\n        return 0\n    }\n\n    const cosTheta = dot(a, b) / Math.sqrt(dot(a, a) * dot(b, b))\n    return acosDegrees(cosTheta)\n}\n\n// u is the vector, n is the plane normal\nconst projectedVectorOntoPlane = (u, n) => {\n    const s = dot(u, n) / dot(n, n)\n    const tempVector = scaleVector(n, s)\n    return vectorFromTo(tempVector, u)\n}\n\nconst getSinCos = theta => [Math.sin(radians(theta)), Math.cos(radians(theta))]\n\nconst IDENTITY_MATRIX_4x4 = [\n    [1, 0, 0, 0],\n    [0, 1, 0, 0],\n    [0, 0, 1, 0],\n    [0, 0, 0, 1],\n]\n\nconst uniformMatrix4x4 = d => {\n    const dRow = [d, d, d, d]\n    return [dRow.slice(), dRow.slice(), dRow.slice(), dRow.slice()]\n}\n\nconst add = (a, b) => a + b\nconst multiply = (a, b) => a * b\n\nconst operate4x4 = (matrixA, matrixB, operation) => {\n    let resultMatrix = uniformMatrix4x4(null)\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n            resultMatrix[i][j] = operation.call(null, matrixA[i][j], matrixB[i][j])\n        }\n    }\n    return resultMatrix\n}\n\nconst dotMultiply4x4 = (matrixA, matrixB) => {\n    return operate4x4(matrixA, matrixB, multiply)\n}\n\nconst add4x4 = (matrixA, matrixB) => {\n    return operate4x4(matrixA, matrixB, add)\n}\n\nconst multiply4x4 = (matrixA, matrixB) => {\n    let resultMatrix = uniformMatrix4x4(null)\n\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n            resultMatrix[i][j] =\n                matrixA[i][0] * matrixB[0][j] +\n                matrixA[i][1] * matrixB[1][j] +\n                matrixA[i][2] * matrixB[2][j] +\n                matrixA[i][3] * matrixB[3][j]\n        }\n    }\n\n    return resultMatrix\n}\n\nfunction tRotXmatrix(theta, tx = 0, ty = 0, tz = 0) {\n    const [s, c] = getSinCos(theta)\n\n    return [\n        [1, 0, 0, tx],\n        [0, c, -s, ty],\n        [0, s, c, tz],\n        [0, 0, 0, 1],\n    ]\n}\n\nfunction tRotYmatrix(theta, tx = 0, ty = 0, tz = 0) {\n    const [s, c] = getSinCos(theta)\n    return [\n        [c, 0, s, tx],\n        [0, 1, 0, ty],\n        [-s, 0, c, tz],\n        [0, 0, 0, 1],\n    ]\n}\n\nfunction tRotZmatrix(theta, tx = 0, ty = 0, tz = 0) {\n    const [s, c] = getSinCos(theta)\n    return [\n        [c, -s, 0, tx],\n        [s, c, 0, ty],\n        [0, 0, 1, tz],\n        [0, 0, 0, 1],\n    ]\n}\n\nconst tRotXYZmatrix = (xTheta, yTheta, zTheta) => {\n    const rx = tRotXmatrix(xTheta)\n    const ry = tRotYmatrix(yTheta)\n    const rz = tRotZmatrix(zTheta)\n    const rxy = multiply4x4(rx, ry)\n    const rxyz = multiply4x4(rxy, rz)\n    return rxyz\n}\n\nconst skew = p => [\n    [0, -p.z, p.y, 0],\n    [p.z, 0, -p.x, 0],\n    [-p.y, p.x, 0, 0],\n    [0, 0, 0, 1],\n]\n\nconst matrixToAlignVectorAtoB = (a, b) => {\n    const v = cross(a, b)\n    const s = vectorLength(v)\n    // When angle between a and b is zero or 180 degrees\n    // cross product is 0, R = I\n    if (s === 0) {\n        return IDENTITY_MATRIX_4x4\n    }\n\n    const c = dot(a, b)\n    const vx = skew(v)\n    const d = (1 - c) / (s * s)\n    const vx2 = multiply4x4(vx, vx)\n    const dMatrix = uniformMatrix4x4(d)\n    const dvx2 = dotMultiply4x4(vx2, dMatrix)\n    const temp = add4x4(IDENTITY_MATRIX_4x4, vx)\n    const transformMatrix = add4x4(temp, dvx2)\n    return transformMatrix\n}\n\nexport {\n    degrees,\n    radians,\n    isTriangle,\n    dot,\n    cross,\n    getNormalofThreePoints,\n    scaleVector,\n    vectorFromTo,\n    addVectors,\n    getUnitVector,\n    projectedVectorOntoPlane,\n    vectorLength,\n    angleBetween,\n    angleOppositeOfLastSide,\n    isCounterClockwise,\n    tRotXmatrix,\n    tRotYmatrix,\n    tRotZmatrix,\n    tRotXYZmatrix,\n    skew,\n    matrixToAlignVectorAtoB,\n    multiply4x4,\n}\n","const DEFAULT_BODY_DIMENSIONS = {\n    front: 100,\n    side: 100,\n    middle: 100,\n}\nconst DEFAULT_LEG_DIMENSIONS = {\n    coxia: 100,\n    femur: 100,\n    tibia: 100,\n}\n\nconst DEFAULT_DIMENSIONS = {\n    front: 100,\n    side: 100,\n    middle: 100,\n    coxia: 100,\n    femur: 100,\n    tibia: 100,\n}\n\nconst DEFAULT_POSE = {\n    leftFront: { alpha: 0, beta: 0, gamma: 0 },\n    rightFront: { alpha: 0, beta: 0, gamma: 0 },\n    leftMiddle: { alpha: 0, beta: 0, gamma: 0 },\n    rightMiddle: { alpha: 0, beta: 0, gamma: 0 },\n    leftBack: { alpha: 0, beta: 0, gamma: 0 },\n    rightBack: { alpha: 0, beta: 0, gamma: 0 },\n}\n\nconst DEFAULT_PATTERN_PARAMS = { alpha: 0, beta: 0, gamma: 0 }\n\nconst DEFAULT_IK_PARAMS = {\n    tx: 0,\n    ty: 0,\n    tz: 0,\n    rx: 0,\n    ry: 0,\n    rz: 0,\n    hipStance: 0,\n    legStance: 0,\n}\n\nconst DEFAULT_GAIT_PARAMS = {\n    tx: 0,\n    tz: 0,\n    rx: 0,\n    ry: 0,\n    legStance: 0,\n    hipStance: 20,\n    hipSwing: 25,\n    liftSwing: 40,\n    stepCount: 5,\n}\n\nexport {\n    DEFAULT_DIMENSIONS,\n    DEFAULT_LEG_DIMENSIONS,\n    DEFAULT_BODY_DIMENSIONS,\n    DEFAULT_POSE,\n    DEFAULT_IK_PARAMS,\n    DEFAULT_PATTERN_PARAMS,\n    DEFAULT_GAIT_PARAMS,\n}\n","const BODY_MESH_COLOR = \"#ff6348\"\nconst BODY_MESH_OPACITY = 0.3\nconst BODY_COLOR = \"#FC427B\"\nconst BODY_OUTLINE_WIDTH = 12\nconst COG_COLOR = \"#32ff7e\"\nconst COG_SIZE = 14\nconst HEAD_SIZE = 14\nconst LEG_COLOR = \"#EE5A24\"\nconst LEG_OUTLINE_WIDTH = 10\nconst SUPPORT_POLYGON_MESH_COLOR = \"#3c6382\"\nconst SUPPORT_POLYGON_MESH_OPACITY = 0.2\nconst LEGENDS_BG_COLOR = \"rgba(44, 62, 80, 0.8)\"\nconst AXIS_ZERO_LINE_COLOR = \"#079992\"\nconst PAPER_BG_COLOR = \"#222f3e\"\nconst GROUND_COLOR = \"#0a3d62\"\nconst LEGEND_FONT_COLOR = \"#2ecc71\"\n\nconst DATA_INDEX_MAP = {\n    bodyMesh: 0,\n    bodyOutline: 1,\n    head: 2,\n    centerOfGravity: 3,\n    centerOfGravityProjection: 4,\n    rightMiddleLeg: 5,\n    rightFrontLeg: 6,\n    leftFrontLeg: 7,\n    leftMiddleLeg: 8,\n    leftBackLeg: 9,\n    rightBackLeg: 10,\n    supportPolygonMesh: 11,\n    hexapodXaxis: 12,\n    hexapodYaxis: 13,\n    hexapodZaxis: 14,\n    worldXaxis: 15,\n    worldYaxis: 16,\n    worldZaxis: 17,\n}\n\nconst DATA = [\n    {\n        name: \"bodyMesh\",\n        showlegend: true,\n        type: \"mesh3d\",\n        opacity: BODY_MESH_OPACITY,\n        color: BODY_MESH_COLOR,\n        x: [100.0, 100.0, -100.0, -100.0, -100.0, 100.0, 100.0],\n        y: [0.0, 100.0, 100.0, 0.0, -100.0, -100.0, 0.0],\n        z: [100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0],\n    },\n    {\n        line: { color: BODY_COLOR, opacity: 1.0, width: BODY_OUTLINE_WIDTH },\n        name: \"bodyOutline\",\n        showlegend: true,\n        type: \"scatter3d\",\n        x: [100.0, 100.0, -100.0, -100.0, -100.0, 100.0, 100.0],\n        y: [0.0, 100.0, 100.0, 0.0, -100.0, -100.0, 0.0],\n        z: [100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0],\n    },\n    {\n        marker: { color: BODY_COLOR, opacity: 1.0, size: HEAD_SIZE },\n        mode: \"markers\",\n        name: \"head\",\n        type: \"scatter3d\",\n        x: [0.0],\n        y: [100.0],\n        z: [100.0],\n    },\n    {\n        marker: { color: COG_COLOR, opacity: 1, size: COG_SIZE },\n        mode: \"markers\",\n        name: \"centerOfGravity\",\n        type: \"scatter3d\",\n        x: [0.0],\n        y: [0.0],\n        z: [100.0],\n    },\n    {\n        marker: { color: COG_COLOR, opacity: 0.5, size: 0.5 * COG_SIZE },\n        mode: \"markers\",\n        name: \"centerOfGravityProjection\",\n        type: \"scatter3d\",\n        x: [0.0],\n        y: [0.0],\n        z: [0.0],\n    },\n    {\n        line: { color: LEG_COLOR, width: LEG_OUTLINE_WIDTH },\n        name: \"rightMiddleLeg\",\n        showlegend: false,\n        type: \"scatter3d\",\n        x: [100.0, 200.0, 300.0, 300.0],\n        y: [0.0, 0.0, 0.0, 0.0],\n        z: [100.0, 100.0, 100.0, 0.0],\n    },\n    {\n        line: { color: LEG_COLOR, width: LEG_OUTLINE_WIDTH },\n        name: \"rightFrontLeg\",\n        showlegend: false,\n        type: \"scatter3d\",\n        x: [100.0, 170.71067811865476, 241.4213562373095, 241.4213562373095],\n        y: [100.0, 170.71067811865476, 241.42135623730948, 241.42135623730948],\n        z: [100.0, 100.0, 100.0, 0.0],\n    },\n    {\n        line: { color: LEG_COLOR, width: LEG_OUTLINE_WIDTH },\n        name: \"leftFrontLeg\",\n        showlegend: false,\n        type: \"scatter3d\",\n        x: [-100.0, -170.71067811865476, -241.42135623730948, -241.42135623730948],\n        y: [100.0, 170.71067811865476, 241.4213562373095, 241.4213562373095],\n        z: [100.0, 100.0, 100.0, 0.0],\n    },\n    {\n        line: { color: LEG_COLOR, width: LEG_OUTLINE_WIDTH },\n        name: \"leftMiddleLeg\",\n        showlegend: false,\n        type: \"scatter3d\",\n        x: [-100.0, -200.0, -300.0, -300.0],\n        y: [0.0, 1.2246467991473532e-14, 2.4492935982947064e-14, 2.4492935982947064e-14],\n        z: [100.0, 100.0, 100.0, 0.0],\n    },\n    {\n        line: { color: LEG_COLOR, width: LEG_OUTLINE_WIDTH },\n        name: \"leftBackLeg\",\n        showlegend: false,\n        type: \"scatter3d\",\n        x: [-100.0, -170.71067811865476, -241.42135623730954, -241.42135623730954],\n        y: [-100.0, -170.71067811865476, -241.42135623730948, -241.42135623730948],\n        z: [100.0, 100.0, 100.0, 0.0],\n    },\n    {\n        line: { color: LEG_COLOR, width: LEG_OUTLINE_WIDTH },\n        name: \"rightBackLeg\",\n        showlegend: false,\n        type: \"scatter3d\",\n        x: [100.0, 170.71067811865476, 241.42135623730948, 241.42135623730948],\n        y: [-100.0, -170.71067811865476, -241.42135623730954, -241.42135623730954],\n        z: [100.0, 100.0, 100.0, 0.0],\n    },\n    {\n        name: \"supportPolygonMesh\",\n        showlegend: true,\n        type: \"mesh3d\",\n        opacity: SUPPORT_POLYGON_MESH_OPACITY,\n        color: SUPPORT_POLYGON_MESH_COLOR,\n        x: [\n            300.0,\n            241.4213562373095,\n            -241.42135623730948,\n            -300.0,\n            -241.42135623730954,\n            241.42135623730948,\n        ],\n        y: [\n            0.0,\n            241.42135623730948,\n            241.4213562373095,\n            2.4492935982947064e-14,\n            -241.42135623730948,\n            -241.42135623730954,\n        ],\n        z: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    },\n    {\n        line: { color: \"#2f3640\", width: 2 },\n        name: \"hexapodXaxis\",\n        mode: \"lines\",\n        showlegend: false,\n        opacity: 1.0,\n        type: \"scatter3d\",\n        x: [0.0, 50.0],\n        y: [0.0, 0.0],\n        z: [100.0, 100.0],\n    },\n    {\n        line: { color: \"#e67e22\", width: 2 },\n        name: \"hexapodYaxis\",\n        mode: \"lines\",\n        showlegend: false,\n        opacity: 1.0,\n        type: \"scatter3d\",\n        x: [0.0, 0.0],\n        y: [0.0, 50.0],\n        z: [100.0, 100.0],\n    },\n    {\n        line: { color: \"#0097e6\", width: 2 },\n        name: \"hexapodZaxis\",\n        mode: \"lines\",\n        showlegend: false,\n        opacity: 1.0,\n        type: \"scatter3d\",\n        x: [0.0, 0.0],\n        y: [0.0, 0.0],\n        z: [100.0, 150.0],\n    },\n    {\n        line: { color: \"#2f3640\", width: 2 },\n        name: \"worldXaxis\",\n        showlegend: false,\n        mode: \"lines\",\n        opacity: 1.0,\n        type: \"scatter3d\",\n        x: [0, 50],\n        y: [0, 0],\n        z: [0, 0],\n    },\n    {\n        line: { color: \"#e67e22\", width: 2 },\n        name: \"worldYaxis\",\n        showlegend: false,\n        mode: \"lines\",\n        opacity: 1.0,\n        type: \"scatter3d\",\n        x: [0, 0],\n        y: [0, 50],\n        z: [0, 0],\n    },\n    {\n        line: { color: \"#0097e6\", width: 2 },\n        name: \"worldZaxis\",\n        showlegend: false,\n        mode: \"lines\",\n        opacity: 1.0,\n        type: \"scatter3d\",\n        x: [0, 0],\n        y: [0, 0],\n        z: [0, 50],\n    },\n]\n\nconst CAMERA_VIEW = {\n    center: {\n        x: 0.0005967195135552272,\n        y: 0.11455181630825005,\n        z: -0.44957387699746415,\n    },\n    eye: {\n        x: 0.010119765679525836,\n        y: 0.573601223004958,\n        z: 0.04247372257492105,\n    },\n    up: {\n        x: 0.006592638138864914,\n        y: 0.00003338632363222382,\n        z: 0.9999782677677168,\n    },\n}\n\nconst SCENE = {\n    xaxis: {\n        nticks: 1,\n        range: [-600, 600],\n        zerolinecolor: AXIS_ZERO_LINE_COLOR,\n        showbackground: false,\n    },\n    yaxis: {\n        nticks: 1,\n        range: [-600, 600],\n        zerolinecolor: AXIS_ZERO_LINE_COLOR,\n        showbackground: false,\n    },\n    zaxis: {\n        nticks: 1,\n        range: [-10, 590],\n        zerolinecolor: AXIS_ZERO_LINE_COLOR,\n        showbackground: true,\n        backgroundcolor: GROUND_COLOR,\n    },\n    aspectmode: \"manual\",\n    aspectratio: { x: 1, y: 1, z: 1 },\n    camera: CAMERA_VIEW,\n}\n\nconst LAYOUT = {\n    scene: SCENE,\n    margin: { b: 20, l: 10, r: 10, t: 20 },\n    paper_bgcolor: PAPER_BG_COLOR,\n    legend: {\n        x: 0,\n        y: 0,\n        bgcolor: LEGENDS_BG_COLOR,\n        font: { family: \"courier\", size: 12, color: LEGEND_FONT_COLOR },\n    },\n    showlegend: false,\n    autosize: true,\n}\n\nexport { DATA, LAYOUT, DATA_INDEX_MAP, SCENE, CAMERA_VIEW }\n","/* * *\n  ..................\n   Hexagon\n  ..................\n\n         |-f-|\n         *---*---*--------   * f - front\n        /    |    \\     |    * s - side\n       /     |     \\    s    * m - middle\n      /      |      \\   |\n     *------cog------* ---\n      \\      |      /|\n       \\     |     / |\n        \\    |    /  |\n         *---*---*   |\n             |       |\n             |---m---|\n\n\n      (leftFront)     (rightFront)\n           v2          v1\n            \\   head  /\n             *---*---*\n            /    |    \\\n  (left    /     |     \\\n  Middle) /      |      \\\n    v3 --*------cog------*-- v0 (rightMiddle)\n          \\      |      /\n           \\     |     /\n            \\    |    /\n             *---*---*\n            /         \\\n          v4           v5\n       (leftBack)   (rightBack)\n\n * * */\nimport { POSITION_NAMES_LIST } from \"./constants\"\nimport Vector from \"./Vector\"\n\nclass Hexagon {\n    dimensions\n    verticesList\n    head\n    cog\n    constructor(dimensions, flags = { hasNoPoints: false }) {\n        this.dimensions = dimensions\n\n        if (flags.hasNoPoints) {\n            return\n        }\n\n        const { front, middle, side } = this.dimensions\n        const vertexX = [middle, front, -front, -middle, -front, front]\n        const vertexY = [0, side, side, 0, -side, -side]\n\n        this.verticesList = POSITION_NAMES_LIST.map(\n            (position, i) => new Vector(vertexX[i], vertexY[i], 0, `${position}Vertex`, i)\n        )\n        this.head = new Vector(0, side, 0, \"headPoint\", 7)\n        this.cog = new Vector(0, 0, 0, \"centerOfGravityPoint\", 6)\n    }\n\n    get closedPointsList() {\n        return [...this.verticesList, this.verticesList[0]]\n    }\n\n    get allPointsList() {\n        return [...this.verticesList, this.cog, this.head]\n    }\n\n    cloneTrotShift(transformMatrix, tx, ty, tz) {\n        return this._doTransform(\"cloneTrotShift\", transformMatrix, tx, ty, tz)\n    }\n\n    cloneTrot(transformMatrix) {\n        return this._doTransform(\"cloneTrot\", transformMatrix)\n    }\n\n    cloneShift(tx, ty, tz) {\n        return this._doTransform(\"cloneShift\", tx, ty, tz)\n    }\n\n    _doTransform(transformFunction, ...args) {\n        let clone = new Hexagon(this.dimensions, { hasNoPoints: true })\n        clone.cog = this.cog[transformFunction](...args)\n        clone.head = this.head[transformFunction](...args)\n        clone.verticesList = this.verticesList.map(point =>\n            point[transformFunction](...args)\n        )\n        return clone\n    }\n}\n\nexport default Hexagon\n","/* * * * *\n  ..................\n   LINKAGE\n  ..................\n\n     p0 *----* p1\n              \\       * p0 = origin / bodyContactPoint\n               * p2   * p1 = coxiaPoint\n               |      * p2 = femurPoint\n               * p3   * p3 = tibiaPoint / footTipPoint\n                      * coxiaVector = vector from p0 to p1\n     localZ           * femurVector = vector from p1 to p2\n     |  localY        * tibiaVector = vector from p2 to p3\n     | /\n     |/\n     |------ localX   * LegPointId = {legId}-{pointId}\n\n\n             2           1       * legId - legName     - localXaxisAngle\n              \\   head  /        *  0    - rightMiddle - 0\n               *---*---*         *  1    - rightFront  - 45\n              /    |    \\        *  2    - leftFront   - 135\n             /     |     \\       *  3    - leftMiddle  - 180\n         3 -*-----cog-----*- 0   *  4    - leftBack    - 225\n             \\     |     /       *  5    - rightBack   - 315\n              \\    |    /\n               *---*---*          ^ hexapodY\n              /         \\         |\n             4           5        *---> hexapodX\n                                 /\n                                * hexapodZ\n\n                     * localXaxisAngle = angle made by hexapodXaxis and localXaxis\n                     * alpha = angle made by coxia Vector and localXaxis\n             p2      * beta = angle made by coxiaVector and femurVector\n             *              = angle made by points p2, p1 and pxPrime\n            / \\\n       *---*---\\---> pxPrime\n      p0   p1   * p3\n\n\n      p0   p1         * gamma = angle made by vector perpendicular to\n       *---*                    coxiaVector and tibiaVector\n           | \\                = angle made by points pzPrime, p1, p3\n           |  \\\n           V   * p3\n          pzPrime\n\n  ..................\n   LINKAGE PROPERTIES\n  ..................\n\n  {} this.dimensions: { coxia, femur, tibia }\n  {} this.pose: { alpha, beta, gamma }\n  \"\" this.position: \"rightMiddle\" from POSITION_NAMES_LIST or \"linkage-position-not-defined\"\n\n  [] this.allPointsList: A list pointing to each of the four points in the map\n      which the first element being the bodyContactPoint, the last element being the footTipPoint\n\n      [\n          {x, y, z, id: \"5-0\", name: \"rightBack-bodyContactPoint\"},\n          {x, y, z, id: \"5-1\", name: \"rightBack-coxiaPoint\"},\n          {x, y, z, id: \"5-2\", name: \"rightBack-femurPoint\"},\n          {x, y, z, id: \"5-3\", name: \"rightBack-footTipPoint\"},\n      ]\n      each id is prefixed with 5 because the leg point id corresponding to \"rightBack\"\n      position is 5.\n\n  ....................\n  (linkage derived properties)\n  ....................\n\n  {} this.maybeGroundContactPoint: The point which probably is the one in contact\n      with the ground, but not necessarily the case (no guarantees)\n  \"\" this.name: \"{position}Leg\" e.g. \"rightMiddleLeg\"\n  \"\" this.id : a number from 0 to 5 corresponding to a particular position\n\n  * * * * */\nimport { tRotYmatrix, tRotZmatrix, multiply4x4 } from \"./geometry\"\nimport {\n    LEG_POINT_TYPES_LIST,\n    POSITION_NAME_TO_ID_MAP,\n    POSITION_NAME_TO_AXIS_ANGLE_MAP,\n} from \"./constants\"\nimport Vector from \"./Vector\"\n\nclass Linkage {\n    constructor(\n        dimensions,\n        position,\n        originPoint = { x: 0, y: 0, z: 0 },\n        pose = { alpha: 0, beta: 0, gamma: 0 },\n        flags = { hasNoPoints: false }\n    ) {\n        Object.assign(this, { dimensions, pose, position })\n\n        if (flags.hasNoPoints) {\n            return\n        }\n\n        this.allPointsList = this._computePoints(pose, originPoint)\n    }\n\n    get bodyContactPoint() {\n        return this.allPointsList[0]\n    }\n\n    get coxiaPoint() {\n        return this.allPointsList[1]\n    }\n\n    get femurPoint() {\n        return this.allPointsList[2]\n    }\n\n    get footTipPoint() {\n        return this.allPointsList[3]\n    }\n\n    get id() {\n        return POSITION_NAME_TO_ID_MAP[this.position]\n    }\n\n    get name() {\n        return `${this.position}Leg`\n    }\n\n    get maybeGroundContactPoint() {\n        const reversedList = this.allPointsList.slice().reverse()\n        const testPoint = reversedList[0]\n        const maybeGroundContactPoint = reversedList.reduce(\n            (testPoint, point) => (point.z < testPoint.z ? point : testPoint),\n            testPoint\n        )\n        return maybeGroundContactPoint\n    }\n\n    /* *\n     * .............\n     * clone (translate) rotate shift cloneTrotShift\n     * .............\n     *\n     * params type:\n     *   matrix:  4x4 matrix\n     *   tx, ty, tz: numbers\n     *\n     * Return a copy of the leg with the same properties\n     * except all the points are rotated and shifted\n     * given the transformation matrix (4x4 matrix) and tx, ty, tz\n     * Note: The transformation matrix can translate the leg\n     * if the last column of of the matrix have non-zero elements\n     * and again be translated by tx, ty, tz\n     * */\n    cloneTrotShift(transformMatrix, tx, ty, tz) {\n        return this._doTransform(\"cloneTrotShift\", transformMatrix, tx, ty, tz)\n    }\n\n    cloneTrot(transformMatrix) {\n        return this._doTransform(\"cloneTrot\", transformMatrix)\n    }\n\n    cloneShift(tx, ty, tz) {\n        return this._doTransform(\"cloneShift\", tx, ty, tz)\n    }\n\n    _doTransform(transformFunction, ...args) {\n        const newPointsList = this.allPointsList.map(oldPoint =>\n            oldPoint[transformFunction](...args)\n        )\n        return this._buildClone(newPointsList)\n    }\n\n    _buildClone(allPointsList) {\n        let clone = new Linkage(\n            this.dimensions,\n            this.position,\n            this.bodyContactPoint,\n            this.pose,\n            { hasNoPoints: true }\n        )\n\n        // override allPointsList of clone\n        clone.allPointsList = allPointsList\n        return clone\n    }\n\n    /* *\n     * .............\n     * structure of pointNameIds\n     * .............\n     *\n     * pointNameIds = [\n     *   { name: \"{legPosition}-bodyContactPoint\", id: \"{legId}-0\" },\n     *   { name: \"{legPosition}-coxiaPoint\", id: \"{legId}-1\" },\n     *   { name: \"{legPosition}-femurPoint\", id: \"{legId}-2\" },\n     *   { name: \"{legPosition}-footTipPoint\", id: \"{legId}-3\" },\n     * ]\n     *\n     * */\n    _buildNameId = (pointName, id) => ({\n        name: `${this.position}-${pointName}`,\n        id: `${this.id}-${id}`,\n    })\n\n    _buildPointNameIds = () =>\n        LEG_POINT_TYPES_LIST.map((pointType, index) =>\n            this._buildNameId(pointType, index)\n        )\n\n    /* *\n     * ................\n     * STEP 1 of computing points:\n     *   find points wrt body contact point\n     * ................\n     * NOTE:\n     * matrix_ab is the matrix which defines the\n     * pose of that coordinate system defined by\n     * matrix_b wrt the coordinate system defined by matrix_a\n     * matrix_ab is the pose of matrix_b wrt matrix_a\n     * where pa is the origin of matrix_a\n     * and pb is the origin of matrix_b wrt pa\n     *\n     * */\n    _computePointsWrtBodyContact(beta, gamma) {\n        const matrix01 = tRotYmatrix(-beta, this.dimensions.coxia, 0, 0)\n        const matrix12 = tRotYmatrix(90 - gamma, this.dimensions.femur, 0, 0)\n        const matrix23 = tRotYmatrix(0, this.dimensions.tibia, 0, 0)\n        const matrix02 = multiply4x4(matrix01, matrix12)\n        const matrix03 = multiply4x4(matrix02, matrix23)\n\n        const originPoint = new Vector(0, 0, 0)\n\n        const localPoints = [\n            originPoint, // bodyContactPoint\n            originPoint.cloneTrot(matrix01), // coxiaPoint\n            originPoint.cloneTrot(matrix02), // femurPoint\n            originPoint.cloneTrot(matrix03), // footTipPoint\n        ]\n\n        return localPoints\n    }\n\n    /* *\n     * ................\n     * STEP 2 of computing points:\n     *   find local points wrt hexapod's center of gravity (0, 0, 0)\n     * ................\n     * */\n    _computePointsWrtHexapodCog(alpha, originPoint, localPoints, pointNameIds) {\n        const zAngle = POSITION_NAME_TO_AXIS_ANGLE_MAP[this.position] + alpha\n\n        const twistMatrix = tRotZmatrix(\n            zAngle,\n            originPoint.x,\n            originPoint.y,\n            originPoint.z\n        )\n\n        const allPointsList = localPoints.map((localPoint, index) => {\n            const name = pointNameIds[index].name\n            const id = pointNameIds[index].id\n            const point = localPoint.newTrot(twistMatrix, name, id)\n            return point\n        })\n\n        return allPointsList\n    }\n\n    /* *\n     *  Example of allPointsList =  [\n     *     {x, y, z, id: \"5-0\", name: \"rightBack-bodyContactPoint\"},\n     *     {x, y, z, id: \"5-1\", name: \"rightBack-coxiaPoint\"},\n     *     {x, y, z, id: \"5-2\", name: \"rightBack-femurPoint\"},\n     *     {x, y, z, id: \"5-3\", name: \"rightBack-footTipPoint\"},\n     * ]\n     * x, y, z are numbers\n     * */\n    _computePoints(pose, originPoint) {\n        const { alpha, beta, gamma } = pose\n        const pointNameIds = this._buildPointNameIds()\n        const localPoints = this._computePointsWrtBodyContact(beta, gamma)\n        // prettier-ignore\n        const allPointsList = this._computePointsWrtHexapodCog(\n            alpha, originPoint, localPoints, pointNameIds\n        )\n        return allPointsList\n    }\n}\n\nexport default Linkage\n","import { dot, cross, vectorFromTo } from \"../../geometry\"\nimport Vector from \"../../Vector\"\n\nconst isLower = (point, normal, height, tol = 1) => -dot(normal, point) > height + tol\n\n/* *\n\n   Each leg has four points (footTip, femurPoint, coxiaPoint, bodyContact).\n   If one point of leg is at the same distance as the ground is\n   from the hexapod's center of gravity, then this leg is on the ground.\n\n   Note: we check starting from the footTip to the bodyContact because\n   the footTip is the one most likely to be on the ground\n\n * */\nconst findLegsOnGround = (legs, normal, height) => {\n    return legs.reduce((legsOnGround, leg) => {\n        const reversedPoints = leg.allPointsList.slice(1).reverse()\n        const onGround = reversedPoints.some(point => sameHeight(point, normal, height))\n        return onGround ? [...legsOnGround, leg] : legsOnGround\n    }, [])\n}\n\nconst sameHeight = (point, normal, height, tol = 1) => {\n    const _height = -dot(normal, point)\n    return Math.abs(height - _height) <= tol\n}\n\nconst SOME_LEG_ID_TRIOS = [\n    [0, 1, 3],\n    [0, 1, 4],\n    [0, 2, 3],\n    [0, 2, 4],\n    [0, 2, 5],\n    [0, 3, 4],\n    [0, 3, 5],\n    [1, 2, 4],\n    [1, 2, 5],\n    [1, 3, 4],\n    [1, 3, 5],\n    [1, 4, 5],\n    [2, 3, 5],\n    [2, 4, 5],\n]\n\nconst ADJACENT_LEG_ID_TRIOS = [\n    [0, 1, 2],\n    [1, 2, 3],\n    [2, 3, 4],\n    [3, 4, 5],\n    [0, 4, 5],\n    [0, 1, 5],\n]\n\n/* *\n * Determines stability of the pose.\n * Determine if projection of 3D point cog\n * onto the plane defined by p0, p1, p2\n * is within a triangle defined by p0, p1, p2.\n * */\nconst isStable = (p0, p1, p2, tol = 0.001) => {\n    const cog = new Vector(0, 0, 0)\n\n    const u = vectorFromTo(p0, p1)\n    const v = vectorFromTo(p0, p2)\n    const w = vectorFromTo(p0, cog)\n    const n = cross(u, v)\n    const n2 = dot(n, n)\n\n    // NOTE: alpha, beta, gamma are NOT angles\n    // cogProjected = alpha * p0 + beta * p1 + gamma * p2\n\n    const beta = dot(cross(u, w), n) / n2\n    const gamma = dot(cross(w, v), n) / n2\n    const alpha = 1 - beta - gamma\n\n    const minVal = -tol\n    const maxVal = 1 + tol\n\n    const cond0 = minVal <= alpha && alpha <= maxVal\n    const cond1 = minVal <= beta && beta <= maxVal\n    const cond2 = minVal <= gamma && gamma <= maxVal\n\n    return cond0 && cond1 && cond2\n}\n\nexport { SOME_LEG_ID_TRIOS, ADJACENT_LEG_ID_TRIOS, isStable, isLower, findLegsOnGround }\n","/* * *\n\nA more general algorithm to account for the cases\nthat are not handled correctly by the orientSolverSpecific.\n\n- Only used by the kinematics-page of the app.\n- Can be optimized or replaced if a more elegant\nalgorithm is available.\n\n............\n  OVERVIEW\n............\n\nFind:\n- The orientation of the hexapod (normal axis of the hexapod body plane)\n- distance of hexapod center of gravity to the ground plane (height)\n- All the legs which are in contact in the ground\n\nHow?\n\nWe have 18 points total.\n(6 legs, three possible points per leg (femurPoint))\n\nWe have a total of 540 combinations\n- get three legs out of six (20 combinations)\n  - we have three possible points for each leg,\n        (coxiaPoint, femurPoint, footTip),\n        that's 27 (3^3) combinations\n  -  27 * 20 is 540\n\nFor each combination:\n    1. Check if stable. If not, try the next combination\n      - Check if the projection of the center of gravity to the plane\n        defined by the three points lies inside the triangle,\n        if not stable, try the next combination\n\n    2. Get the HEIGHT and normal of the height and normal of the triangle plane\n        (We need this for the next part)\n\n    3. For each of the three legs, check if the two other points on the leg is not\n        lower than HEIGHT, (6 points total)\n        if condition if broken, try the next combination.\n\n    4. For each of the three other legs, check if all points (3 points of each leg)\n        are not lower than HEIGHT\n        if this condition is broken, try the next combination. (9 points total)\n\n    5. If no condition is violated, then this is good, return this!\n\n * * */\nimport {\n    SOME_LEG_ID_TRIOS,\n    ADJACENT_LEG_ID_TRIOS,\n    isStable,\n    isLower,\n    findLegsOnGround,\n} from \"./orientSolverHelpers\"\nimport { dot, getNormalofThreePoints } from \"../../geometry\"\n\nconst makeJointIndexTrios = () => {\n    let jointIdTrios = []\n    for (let i = 3; i > 0; i--) {\n        for (let j = 3; j > 0; j--) {\n            for (let k = 3; k > 0; k--) {\n                jointIdTrios.push([i, j, k])\n            }\n        }\n    }\n    return jointIdTrios\n}\n\nconst shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1))\n        ;[array[i], array[j]] = [array[j], array[i]]\n    }\n    return array\n}\n\nconst JOINT_INDEX_TRIOS = makeJointIndexTrios()\n\nconst computeOrientationProperties = (legsNoGravity, flags = { shuffle: false }) => {\n    const someLegTrios = flags.shuffle\n        ? shuffleArray(SOME_LEG_ID_TRIOS.slice())\n        : SOME_LEG_ID_TRIOS\n\n    const legIndexTrios = [...someLegTrios, ...ADJACENT_LEG_ID_TRIOS]\n\n    let fallback = null\n\n    for (let i = 0; i < legIndexTrios.length; i++) {\n        const threeLegIndices = legIndexTrios[i]\n        const { threeLegs, otherThreeLegs } = getTwoLegSets(\n            threeLegIndices,\n            legsNoGravity\n        )\n\n        for (let j = 0; j < JOINT_INDEX_TRIOS.length; j++) {\n            const threeJointIndices = JOINT_INDEX_TRIOS[j]\n\n            const [p0, p1, p2] = getThreePoints(threeLegs, threeJointIndices)\n\n            if (!isStable(p0, p1, p2)) {\n                continue\n            }\n\n            const normal = getNormalofThreePoints(p0, p1, p2, \"normalVector\")\n            const height = -dot(normal, p0)\n\n            if (\n                anotherPointOfSameLegIsLower(threeLegs, threeJointIndices, normal, height)\n            ) {\n                continue\n            }\n\n            if (anotherPointofOtherLegsIsLower(otherThreeLegs, normal, height)) {\n                continue\n            }\n\n            // ❗❗❗THIS IS A HACK ❗❗❗\n            // THERE IS A BUG HERE SOMEWHERE, FIND IT\n            if (height === 0) {\n                if (fallback === null) {\n                    fallback = { p0, p1, p2, normal, height }\n                }\n                continue\n            }\n\n            const groundLegsNoGravity = findLegsOnGround(legsNoGravity, normal, height)\n            return { nAxis: normal, height, groundLegsNoGravity }\n        }\n    }\n\n    if (fallback === null) {\n        return null\n    }\n\n    return {\n        nAxis: fallback.normal,\n        height: fallback.height,\n        groundLegsNoGravity: findLegsOnGround(\n            legsNoGravity,\n            fallback.normal,\n            fallback.height\n        ),\n    }\n}\n\nconst getThreePoints = (threeLegs, threeJointIndices) =>\n    threeLegs.map((leg, index) => {\n        const jointId = threeJointIndices[index]\n        return leg.allPointsList[jointId]\n    })\n\nconst getTwoLegSets = (threeLegIndices, sixLegs) => {\n    const threeLegs = threeLegIndices.map(n => sixLegs[n])\n    const otherThreeLegIndices = [...Array(6).keys()].filter(\n        n => !threeLegIndices.includes(n)\n    )\n    const otherThreeLegs = otherThreeLegIndices.map(n => sixLegs[n])\n    return { threeLegs, otherThreeLegs }\n}\n\nconst anotherPointOfSameLegIsLower = (threeLegs, threeJointIndices, normal, height) => {\n    for (let i = 0; i < 3; i++) {\n        const [leg, jointIndex] = [threeLegs[i], threeJointIndices[i]]\n\n        const hasLower = leg.allPointsList.some((otherPoint, index) => {\n            const notBodyContact = index !== 0\n            const notItself = index !== jointIndex\n            return notBodyContact && notItself && isLower(otherPoint, normal, height)\n        })\n\n        if (hasLower) {\n            return true\n        }\n    }\n    return false\n}\n\nconst anotherPointofOtherLegsIsLower = (otherThreeLegs, normal, height) => {\n    for (let i = 0; i < 3; i++) {\n        const leg = otherThreeLegs[i]\n        const hasLower = leg.allPointsList\n            .slice(1)\n            .some(point => isLower(point, normal, height))\n\n        if (hasLower) {\n            return true\n        }\n    }\n\n    return false\n}\n\nexport { computeOrientationProperties }\n","import { dot, getNormalofThreePoints } from \"../../geometry\"\nimport {\n    SOME_LEG_ID_TRIOS,\n    ADJACENT_LEG_ID_TRIOS,\n    isStable,\n    findLegsOnGround,\n    isLower,\n} from \"./orientSolverHelpers\"\n\nconst LEG_ID_TRIOS = [...SOME_LEG_ID_TRIOS, ...ADJACENT_LEG_ID_TRIOS]\n\n/* *\n  .................\n  COMPUTE ORIENTATION PROPERTIES (TYPE: SPECIFIC)\n  .................\n\n  Given: 1. A list of legs with known pose and\n            its points wrt the hexapod body is known\n         2. The legs which are in contact with the ground\n            is known\n\n  Find: 1. Normal vector of the plane defined by foot tip of\n           legs on the ground wrt the hexapod body plane\n        2. Distance of the hexapod body plane to the plane\n           defined by the foot tips on the ground\n        3. Which legs are on the ground\n * */\nconst computeOrientationProperties = legsNoGravity => {\n    const result = computePlaneProperties(legsNoGravity)\n\n    if (result === null) {\n        return null\n    }\n    const groundLegsNoGravity = findLegsOnGround(\n        legsNoGravity,\n        result.normal,\n        result.height\n    )\n\n    return { nAxis: result.normal, height: result.height, groundLegsNoGravity }\n}\n\n/* *\n * .................\n * COMPUTE PLANE PROPERTIES\n * .................\n * */\nconst computePlaneProperties = legs => {\n    const maybeGroundContactPoints = legs.map(leg => leg.maybeGroundContactPoint)\n\n    for (let i = 0; i < LEG_ID_TRIOS.length; i++) {\n        const legTrio = LEG_ID_TRIOS[i]\n        const [p0, p1, p2] = legTrio.map(j => maybeGroundContactPoints[j])\n\n        if (!isStable(p0, p1, p2)) {\n            continue\n        }\n        const normal = getNormalofThreePoints(p0, p1, p2, \"normalVector\")\n\n        /* * *\n         *\n         *  cog *   ^ (normal_vector) ----\n         *       \\  |                  |\n         *        \\ |               -height\n         *         \\|                  |\n         *          V p0 (foot_tip) ---v--\n         *\n         *  using p0, p1 or p2 should yield the same height\n         *\n         * * */\n        const height = -dot(normal, p0)\n\n        const otherTrio = [...Array(6).keys()].filter(j => !legTrio.includes(j))\n        const otherFootTips = otherTrio.map(j => maybeGroundContactPoints[j])\n\n        const noOtherLegLower = otherFootTips.every(\n            footTip => !isLower(footTip, normal, height)\n        )\n\n        if (noOtherLegLower) {\n            return { normal, height }\n        }\n    }\n\n    return null\n}\n\nexport { computeOrientationProperties }\n","import { degrees } from \"../geometry\"\nimport { POSITION_NAME_TO_ID_MAP } from \"../constants\"\n\n/**\n\nmightTwist()\n    params: list of legs that are known to touch the ground\n    returns: boolean\n        false if we are sure it won't twist\n        true if there's a possibility that it might twist\n\ngiven the starting pose is such that:\n    - all alphas are zero\n    - all foot tips are touching the ground\n\nthen the hexapod will only twist if:\n    - ATLEAST three alphas of the legs touching the ground\n    - the point of contact of these legs are foot tips\n    - All the twist must be only in one directions\n      ie: the threes alphas are either all positive or all negative\n      (NOT a mix of both)\n\nIt will definitely not twist if:\n    - If only two or less of the legs has an alpha !== 0\n    - less than three alphas are twisting towards one direction\n\n **/\nconst mightTwist = legsOnGround => {\n    let negativeAlphaCount = 0\n    let positiveAlphaCount = 0\n\n    for (let i = 0; i < legsOnGround.length; i++) {\n        const leg = legsOnGround[i]\n        const pointType = leg.maybeGroundContactPoint.name.split(\"-\")[1]\n\n        const footTipIsOnGround = pointType === \"footTipPoint\"\n        const changedAlpha = leg.pose.alpha !== 0\n\n        if (footTipIsOnGround && changedAlpha) {\n            leg.pose.alpha > 0 ? positiveAlphaCount++ : negativeAlphaCount++\n        }\n    }\n\n    return positiveAlphaCount >= 3 || negativeAlphaCount >= 3\n}\n\n/* *\n\ncomplexTwist()\n\nParams:\n\ndefaultPoints:\n    This is the list of the six points which are on the ground\n    when a hexapod of the same dimensions has the default pose\n    (all angles == 0 ), because it is that pose all of these points\n    are of type footTipPoint\n\ncurrentPoints:\n    This are the list of points (NOT necessarily six and\n    NOT necessarily footTipPoints) that will be on the ground\n    when a hexapod of this dimensions is on a specified pose\n    BUT is NOT rotated twisted along the zAxis\n\nFind:\n    The angle about the zAxis that the hexapod would rotate\n    assuming that the hexapod will start with the\n    default pose (which the defaultPoints would be the ground\n    contact points)\n    and will end at the specified pose (which would\n    result the currentPoints as the ground contact points\n    if the hexapod is not twisted about the zAxis).\n\nAlgorithm:\n    Find a point that is on the ground at\n    the current pose, and at the default pose.\n    (samePointPosition)\n\n    Find the angle to align that currentPoint\n    to the defaultPoint.\n\n    (this means that the hexapod would have twisted about its zAxis\n    so that the point in the ground in this legPosition\n    is the same before (default pose) and after\n    (current pose) moving to the current pose)\n * */\nconst complexTwist = (currentPoints, defaultPoints) => {\n    const currentSamePoint = currentPoints.find(point => {\n        const pointType = point.name.split(\"-\")[1]\n        return pointType === \"footTipPoint\"\n    })\n\n    if (currentSamePoint === undefined) {\n        return 0\n    }\n\n    const samePointPosition = currentSamePoint.name.split(\"-\")[0]\n    const samePointIndex = POSITION_NAME_TO_ID_MAP[samePointPosition]\n    const defaultSamePoint = defaultPoints[samePointIndex]\n\n    const thetaRadians =\n        Math.atan2(defaultSamePoint.y, defaultSamePoint.x) -\n        Math.atan2(defaultSamePoint.y, defaultSamePoint.x)\n\n    return degrees(thetaRadians)\n}\n\n/**\n\nsimpleTwist()\n\nWe twist in the condition that:\n  - All the legs pose has same alpha\n  - the ground contact points are either all femurPoints or all footTipPoints\n   if all femurPoints on ground, make sure bodyContactPoint.z != femurPoint.z\n    (ie  if hexapod body is not on the ground we should not twist)\n\n**/\nconst simpleTwist = groundLegsNoGravity => {\n    const firstLeg = groundLegsNoGravity[0]\n\n    const allSameAlpha = groundLegsNoGravity.every(\n        leg => leg.pose.alpha === firstLeg.pose.alpha\n    )\n\n    if (!allSameAlpha) {\n        return 0\n    }\n\n    const allPointTypes = groundLegsNoGravity.map(\n        leg => leg.maybeGroundContactPoint.name.split(\"-\")[1]\n    )\n\n    const firstPointType = allPointTypes[0]\n\n    const allPointsSameType = allPointTypes.every(pointType => {\n        return pointType === firstPointType\n    })\n\n    if (!allPointsSameType) {\n        return 0\n    }\n\n    // at this point, all ground points are of the same type\n    if ([\"coxiaPoint\", \"bodyContactPoint\"].includes(firstPointType)) {\n        return 0\n    }\n\n    // at this point, all ground points are either ALL femurPoint or ALL footTipPoint\n    if (firstPointType === \"femurPoint\") {\n        const hexapodBodyPlaneOnGround =\n            firstLeg.bodyContactPoint.z === firstLeg.femurPoint.z\n\n        if (hexapodBodyPlaneOnGround) {\n            return 0\n        }\n    }\n\n    return -firstLeg.pose.alpha\n}\n\nexport { complexTwist, mightTwist, simpleTwist }\n","import { POSITION_NAMES_LIST, POSITION_NAME_TO_ID_MAP } from \"./constants\"\nimport { matrixToAlignVectorAtoB, tRotZmatrix } from \"./geometry\"\nimport { DEFAULT_POSE } from \"../templates\"\n\nimport Vector from \"./Vector\"\nimport Hexagon from \"./Hexagon\"\nimport Linkage from \"./Linkage\"\n\nimport * as oSolverGeneral from \"./solvers/orient/orientSolverGeneral\"\nimport * as oSolverSpecific from \"./solvers/orient/orientSolverSpecific\"\n\nimport { simpleTwist, mightTwist, complexTwist } from \"./solvers/twistSolver\"\n\nconst DEFAULT_LOCAL_AXES = {\n    xAxis: new Vector(1, 0, 0, \"hexapodXaxis\"),\n    yAxis: new Vector(0, 1, 0, \"hexapodYaxis\"),\n    zAxis: new Vector(0, 0, 1, \"hexapodZaxis\"),\n}\n\nconst transformLocalAxes = (localAxes, twistMatrix) => ({\n    xAxis: localAxes.xAxis.cloneTrot(twistMatrix),\n    yAxis: localAxes.yAxis.cloneTrot(twistMatrix),\n    zAxis: localAxes.zAxis.cloneTrot(twistMatrix),\n})\n\n/* * *\n build a list of six legs\n given dimensions and  the respective\n bodyContacts points and pose\n * * */\nconst buildLegsList = (bodyContactPoints, pose, legDimensions) =>\n    POSITION_NAMES_LIST.map(\n        (position, index) =>\n            new Linkage(legDimensions, position, bodyContactPoints[index], pose[position])\n    )\n\nconst hexapodErrorInfo = () => ({\n    isAlert: true,\n    subject: \"Unstable position.\",\n    body: \"error in solving for orientation \",\n})\n\nconst hexapodSuccessInfo = () => ({\n    isAlert: false,\n    subject: \"Success!\",\n    body: \"Stable orientation found.\",\n})\n\n/* * *\n\n............................\n Virtual Hexapod properties\n............................\n\nProperty types:\n{}: hash map / object / dictionary\n[]: array / list\n##: number\n\"\": string\n\n{} this.dimensions: {front, side, middle, coxia, femur, tibia}\n\n{} this.pose: A hash mapping the position name to a hash map of three angles\n    which define the pose of the hexapod\n    i.e. { rightMiddle: {alpha, beta, gamma },\n           leftBack: { alpha, betam gamma },\n             ...\n         }\n\n[] this.body: A hexagon object\n    which contains all the info of the 8 points defining the hexapod body\n    (6 vertices, 1 head, 1 center of gravity)\n\n[] this.legs: A list which has elements that point to six Linkage objects.\n    The order goes counter clockwise starting from the first element\n    which is the rightMiddle leg up until the last element which is rightBack leg.\n    Each leg contains the points that define that leg\n    as well as other properties pertaining it (see Linkage class)\n\n[] this.legPositionsOnGround: A list of the leg positions (strings)\n    that are known to be in contact with the ground\n\n{} this.localAxes: A hash containing three vectors defining the local\n    coordinate frame of the hexapod wrt the world coordinate frame\n    i.e. {\n        xAxis: {x, y, z, name=\"hexapodXaxis\", id=\"no-id\"},\n        yAxis: {x, y, z, name=\"hexapodYaxis\", id=\"no-id\"},\n        zAxis: {x, y, z, name=\"hexapodZaxis\", id=\"no-id\"},\n    }\n\n....................\n(virtual hexapod derived properties)\n....................\n\n{} this.bodyDimensions: { front, side, middle }\n{} this.legDimensions: { coxia, femur, tibia }\n\n## this.distanceFromGround: A number which is the perpendicular distance\n    from the hexapod's center of gravity to the ground plane\n\n{} this.cogProjection: a point that represents the projection\n    of the hexapod's center of gravity point to the ground plane\n    i.e { x, y, z, name=\"centerOfGravityProjectionPoint\", id=\"no-id\"}\n\n[] this.groundContactPoints: a list whose elements point to points\n    from the leg which contacts the ground.\n    This list can contain 6 or less elements.\n    (It can have a length of 3, 4, 5 or 6)\n    i.e. [\n        { x, y, z, name=\"rightMiddle-femurPoint\", id=\"0-2\"},\n        { x, y, z, name=\"leftBack-footTipPoint\", id=4-3},\n         ...\n    ]\n\n * * */\nclass VirtualHexapod {\n    dimensions\n    pose\n    body\n    legs\n    legPositionsOnGround\n    localAxes\n    foundSolution\n    constructor(\n        dimensions,\n        pose,\n        flags = { hasNoPoints: false, assumeKnownGroundPoints: false, wontRotate: false }\n    ) {\n        Object.assign(this, { dimensions, pose })\n\n        if (flags.hasNoPoints) {\n            return\n        }\n\n        // .................\n        // STEP 1: Build a flatHexagon and 'dangling' linkages\n        // then find  properties we can derive from this\n        // .................\n\n        const flatHexagon = new Hexagon(this.bodyDimensions)\n\n        // legsNoGravity are linkages have the correct pose but\n        // are not necessarily correctly oriented wrt the world\n        // prettier-ignore\n        const legsNoGravity = buildLegsList(\n            flatHexagon.verticesList, this.pose, this.legDimensions\n        )\n\n        // `solved` has:\n        // - new orientation of the body (nAxis)\n        // - which legs are on the ground (groundLegsNoGravity)\n        // - distance of center of gravity to the ground (height)\n        const solved = flags.assumeKnownGroundPoints\n            ? oSolverSpecific.computeOrientationProperties(legsNoGravity)\n            : oSolverGeneral.computeOrientationProperties(legsNoGravity)\n\n        if (solved === null) {\n            this.foundSolution = false\n            return\n        }\n\n        this.foundSolution = true\n        this.legPositionsOnGround = solved.groundLegsNoGravity.map(leg => leg.position)\n\n        // .................\n        // STEP 2: Rotate and shift legs and body given what we've solved\n        // .................\n\n        // prettier-ignore\n        const transformMatrix = matrixToAlignVectorAtoB(\n            solved.nAxis, DEFAULT_LOCAL_AXES.zAxis\n        )\n\n        this.legs = legsNoGravity.map(leg =>\n            leg.cloneTrotShift(transformMatrix, 0, 0, solved.height)\n        )\n        this.body = flatHexagon.cloneTrotShift(transformMatrix, 0, 0, solved.height)\n        this.localAxes = transformLocalAxes(DEFAULT_LOCAL_AXES, transformMatrix)\n\n        // .................\n        // STEP 3: Twist around the zAxis if you have to\n        // .................\n        if (flags.wontRotate) {\n            return\n        }\n\n        // case 1: hexapod will not twist about z axis\n        if (this.legs.every(leg => leg.pose.alpha === 0)) {\n            return\n        }\n\n        // case 2: When all alpha angles are the same for all legs\n        const twistAngle = simpleTwist(solved.groundLegsNoGravity)\n        if (this.maybeTwistAngle !== 0) {\n            this._twist(twistAngle)\n            return\n        }\n\n        // case 3: All other cases\n        if (mightTwist(solved.groundLegsNoGravity)) {\n            this._handleComplexTwist(flatHexagon.verticesList)\n        }\n    }\n\n    get distanceFromGround() {\n        return this.body.cog.z\n    }\n\n    get cogProjection() {\n        return new Vector(\n            this.body.cog.x,\n            this.body.cog.y,\n            0,\n            \"centerOfGravityProjectionPoint\"\n        )\n    }\n\n    get info() {\n        return this.foundSolution ? hexapodSuccessInfo() : hexapodErrorInfo()\n    }\n\n    get bodyDimensions() {\n        const { front, middle, side } = this.dimensions\n        return { front, middle, side }\n    }\n\n    get legDimensions() {\n        const { coxia, femur, tibia } = this.dimensions\n        return { coxia, femur, tibia }\n    }\n\n    get groundContactPoints() {\n        return this.legPositionsOnGround.map(position => {\n            const index = POSITION_NAME_TO_ID_MAP[position]\n            return this.legs[index].maybeGroundContactPoint\n        })\n    }\n\n    cloneTrot(transformMatrix) {\n        // Note: transform matrix passed should be purely rotational\n        const body = this.body.cloneTrot(transformMatrix)\n        const legs = this.legs.map(leg => leg.cloneTrot(transformMatrix))\n        const localAxes = transformLocalAxes(this.localAxes, transformMatrix)\n        return this._buildClone(body, legs, localAxes)\n    }\n\n    cloneShift(tx, ty, tz) {\n        const body = this.body.cloneShift(tx, ty, tz)\n        const legs = this.legs.map(leg => leg.cloneShift(tx, ty, tz))\n        return this._buildClone(body, legs, this.localAxes)\n    }\n\n    _buildClone(body, legs, localAxes) {\n        // FIXME:\n        // After shifting and/or rotating the hexapod\n        // We can no longer guarrantee that the legPositionsOnGround\n        // is the same as before\n        // must handle this soon!!\n        let clone = new VirtualHexapod(this.dimensions, this.pose, { hasNoPoints: true })\n        Object.assign(clone, {\n            body,\n            legs,\n            localAxes,\n            legPositionsOnGround: this.legPositionsOnGround,\n            foundSolution: this.foundSolution,\n        })\n        return clone\n    }\n\n    _handleComplexTwist(verticesList) {\n        // prettier-ignore\n        const defaultLegs = buildLegsList(\n            verticesList, DEFAULT_POSE, this.legDimensions\n        )\n\n        // DefaultLegs: The list of legs when a hexapod\n        // of these dimensions is at the default pose\n        // (ie all angles are zero)\n        // DefaultPoints: the corresponding ground contact\n        // points of defaultLegs\n        const defaultPoints = defaultLegs.map(\n            leg => leg.cloneShift(0, 0, this.dimensions.tibia).maybeGroundContactPoint\n        )\n\n        // currentPoints: Where the ground contact points are currently\n        // given all the transformations we have done so far\n        const currentPoints = this.groundContactPoints\n        const twistAngle = complexTwist(currentPoints, defaultPoints)\n\n        if (twistAngle !== 0) {\n            this._twist()\n        }\n    }\n\n    _twist(twistAngle) {\n        const twistMatrix = tRotZmatrix(twistAngle)\n        this.body = this.body.cloneTrot(twistMatrix)\n        this.legs = this.legs.map(leg => leg.cloneTrot(twistMatrix))\n        this.localAxes = transformLocalAxes(this.localAxes, twistMatrix)\n    }\n\n    _danglingHexapod(body, legs) {\n        this.body = body\n        this.legs = legs\n        this.localAxes = DEFAULT_LOCAL_AXES\n        this.legPositionsOnGround = []\n    }\n}\n\nexport default VirtualHexapod\n","class IKMessage {\n    static success = {\n        subject: \"Success.\",\n        body: \"All legs are on the floor.\",\n    }\n\n    static successLegsOnAir = legs => ({\n        subject: \"Success.\",\n        body: `But some legs won't reach target points on the ground:\\n${IKMessage.bulletPoints(\n            legs\n        )}`,\n    })\n\n    static noSupport = (reason, legs, flags = { listLegs: false }) => ({\n        subject: \"Failure: No Support.\",\n        body: `${reason}\\n${flags.listLegs ? IKMessage.bulletPoints(legs) : \"\"}`,\n    })\n\n    static badPoint = point => ({\n        subject: \"Failure: Bad Point.\",\n        body: `At least one point would be shoved to the ground:\\n${point.toMarkdownString()}`,\n    })\n\n    static bulletPoints = elements =>\n        elements.reduce((msg, position) => msg + ` - ${position}\\n`, \"\")\n\n    static badLeg = message => ({\n        subject: `Failure: Bad leg.`,\n        body: message,\n    })\n\n    static alphaNotInRange = (position, alpha, maxAngle) => ({\n        subject: `Failure: Alpha not within range`,\n        body: `The alpha (${alpha}) computed for ${position} leg is not within -${maxAngle} < alpha < ${maxAngle}`,\n    })\n\n    static initialized = {\n        subject: \"Initialized\",\n        body: \"Has not solved for anything yet.\",\n    }\n}\n\nclass LegIKInfo {\n    static targetReached = position => ({\n        legPosition: position,\n        message: `Success! (${position})`,\n        obtainedSolution: true,\n        reachedTarget: true,\n    })\n\n    static targetNotReached = position => ({\n        legPosition: position,\n        message: `Success! But this leg won't reach the target ground point. (${position})`,\n        obtainedSolution: true,\n        reachedTarget: false,\n    })\n\n    static blocked = position => ({\n        legPosition: position,\n        message: `Failure. The ground is blocking the path. The target point can only be reached it by digging the ground. (${position})`,\n        obtainedSolution: false,\n        reachedTarget: true,\n    })\n\n    static femurTooLong = position => ({\n        legPosition: position,\n        message: `Failure. Femur length too long. (${position})`,\n        obtainedSolution: false,\n        reachedTarget: false,\n    })\n\n    static tibiaTooLong = position => ({\n        legPosition: position,\n        message: `Failure. Tibia length too long. (${position})`,\n        obtainedSolution: false,\n        reachedTarget: false,\n    })\n\n    static initialized = position => ({\n        legPosition: position,\n        obtainedSolution: false,\n        reachedTarget: false,\n        message: `Haven't solved anything yet. (${position})`,\n    })\n}\n\nexport { LegIKInfo, IKMessage }\n","/* *\n\nALIASES:\n    p0: bodyContactPoint (local)\n    p1: coxaPoint (local)\n    p2: femurPoint (local)\n    p3: footTipPoint (local)\n\n           p2x'\n           /\n          /          GIVEN:\n         * p2         * (coxia) distance from p0 to p1\n        /|            * (femur) distance from p1 to p2\n       / |            * (tibia) distance from p2 to p3\np0  p1/  |            * (summa) distance from p0 to p3\n *---*   | ---> p1x'_  * rho: angle between\n  \\   \\  |                 -> p0 to p1 and p0 to p3\n    \\  \\ |            * p0 is (0, 0, 0)\n      \\ \\|            * p0 to p1 vector is inline with legXaxis\n        * p3\n                    INTERMEDIATE:\nlegZaxis              * (pars) distance from p1 to p3\n ^                    * theta: angle between\n |                          -> p1 to p2 and p1 and p3\n * - > legXaxis       * phi: angle between\n                            -> p1 to p3 and p1 to p1x'_ (legXaxis)\n                      * epsi: angle between\n                            -> p2 to p1 and p2 to p3\n\nFIND: (counter clockwise is positive)\n  * beta: Angle betweenlegXaxis and p1 to p2\n          beta > 0 if p1 to p2 is above legXaxis\n          beta < 0 if p1 to p2 is below the legXaxis\n  * gamma: Angle between p1 to p2 and axis perpendicular to p1 p2\n\nEXAMPLE: When p0, p2, p3, and p3 are configured this way then:\n    * p2 to p3z' axis is 180 degrees wrt legZaxis\n    * beta = 0\n    * gamma = +90\n\np0   p1   p2   p3\n*----*----*----*\n          |\n          |\n          V p3z'\n\n * */\nimport Vector from \"../../Vector\"\nimport {\n    vectorFromTo,\n    angleBetween,\n    radians,\n    vectorLength,\n    angleOppositeOfLastSide,\n    isTriangle,\n} from \"../../geometry\"\nimport { LegIKInfo } from \"./IKInfo\"\n\nclass LinkageIKSolver {\n    info // { legPosition, obtainedSolution, reachedTarget, message }\n    vectors = {\n        legXaxis: new Vector(1, 0, 0, \"legXaxis\"),\n        parsVector: null,\n    }\n    points = {\n        bodyContactPoint: null,\n        coxiaPoint: null,\n        targetFootTipPoint: null,\n    }\n    dimensions = {\n        coxia: 0,\n        femur: 0,\n        tibia: 0,\n        summa: 0,\n        pars: 0,\n    }\n    angles = {\n        beta: null,\n        gamma: null,\n        rho: null,\n    }\n\n    constructor(legPosition) {\n        this.info = LegIKInfo.initialized(legPosition)\n    }\n\n    solve(coxia, femur, tibia, summa, rho) {\n        this.angles.rho = rho\n        this.dimensions = { coxia, femur, tibia, summa }\n        const coxiaPoint = new Vector(coxia, 0, 0, \"coxiaPoint\")\n        const targetFootTipPoint = this._computeTargetFootTipPoint()\n\n        const parsVector = vectorFromTo(coxiaPoint, targetFootTipPoint)\n        const pars = vectorLength(parsVector)\n\n        this.dimensions.pars = pars\n        this.points = { ...this.points, coxiaPoint, targetFootTipPoint }\n        this.vectors = { ...this.vectors, parsVector }\n\n        isTriangle(pars, femur, tibia)\n            ? this._handleCaseTriangleCanForm()\n            : this._handleEdgeCase()\n\n        return this\n    }\n\n    get legPosition() {\n        return this.info.legPosition\n    }\n\n    get beta() {\n        return this.angles.beta\n    }\n\n    get gamma() {\n        return this.angles.gamma\n    }\n\n    get obtainedSolution() {\n        return this.info.obtainedSolution\n    }\n\n    get reachedTarget() {\n        return this.info.reachedTarget\n    }\n\n    get message() {\n        return this.info.message\n    }\n\n    _computeTargetFootTipPoint() {\n        const [summa, rho] = [this.dimensions.summa, this.angles.rho]\n        const px = summa * Math.cos(radians(rho))\n        const pz = -summa * Math.sin(radians(rho))\n        return new Vector(px, 0, pz, \"targetLocalFootTipPoint\")\n    }\n\n    _handleCaseTriangleCanForm() {\n        const { femur, pars, tibia } = this.dimensions\n        const { parsVector, legXaxis } = this.vectors\n        const { targetFootTipPoint } = this.points\n\n        const theta = angleOppositeOfLastSide(femur, pars, tibia)\n        const phi = angleBetween(parsVector, legXaxis)\n        const beta = targetFootTipPoint.z < 0 ? theta - phi : theta + phi\n\n        const epsi = angleOppositeOfLastSide(femur, tibia, pars)\n        const femurPointZ = femur * Math.sin(radians(beta))\n\n        this.angles.beta = beta\n\n        if (targetFootTipPoint.z > femurPointZ) {\n            this.info = LegIKInfo.blocked(this.legPosition)\n            return\n        }\n\n        this.angles.gamma = epsi - 90\n        this.info = LegIKInfo.targetReached(this.legPosition)\n    }\n\n    _handleEdgeCase() {\n        const { pars, tibia, femur } = this.dimensions\n\n        if (pars + tibia < femur) {\n            this.info = LegIKInfo.femurTooLong(this.legPosition)\n            return\n        }\n\n        if (pars + femur < tibia) {\n            console.log(this.info.legPosition)\n            this.info = LegIKInfo.tibiaTooLong(this.legPosition)\n            return\n        }\n\n        // then femur + tibia < pars\n        //\n        // p0 *---* p1     * stretch to try to reach target\n        //         \\       * gamma:\n        //          * p2      => 90: stretch, 0: curl down, 180: curl up\n        //           \\\n        //            * p3 (actual when stretched)\n        //\n        //              * targetp3\n        //\n\n        const { parsVector, legXaxis } = this.vectors\n        this.angles = {\n            ...this.angles,\n            beta: -angleBetween(parsVector, legXaxis),\n            gamma: 90,\n        }\n\n        this.info = LegIKInfo.targetNotReached(this.legPosition)\n    }\n}\n\nexport default LinkageIKSolver\n","import { POSITION_NAME_TO_IS_LEFT_MAP } from \"../../constants\"\n\nclass HexapodSupportCheck {\n    static reason = {\n        MIGHT_BE_STABLE_LESS:\n            \"Might be stable.\\nLess than three known legs are off the ground.\",\n        TOO_MANY_LEGS_OFF: \"Definitely Unstable.\\nToo many legs off the floor.\",\n        RIGHT_LEGS_OFF: \"Definitely Unstable.\\nAll right legs are off the floor.\",\n        LEFT_LEGS_OFF: \"Definitely Unstable.\\nAll left legs are off the floor.\",\n        MIGHT_BE_STABLE_MORE:\n            \"Might be stable.\\nThree known legs are off the ground.\\nOne is on opposite side of the other two.\",\n    }\n\n    static checkSupport = legsNamesoffGround => {\n        const reason = HexapodSupportCheck.reason\n\n        if (legsNamesoffGround.length < 3) {\n            return [false, reason.MIGHT_BE_STABLE_LESS]\n        }\n\n        if (legsNamesoffGround.length >= 4) {\n            return [true, reason.TOO_MANY_LEGS_OFF]\n        }\n\n        // Leg count is exactly 3 at this point\n        const legLeftOrRight = legsNamesoffGround.map(\n            legPosition => POSITION_NAME_TO_IS_LEFT_MAP[legPosition]\n        )\n\n        if (legLeftOrRight.every(isLeft => !isLeft)) {\n            return [true, reason.RIGHT_LEGS_OFF]\n        }\n\n        if (legLeftOrRight.every(isLeft => isLeft)) {\n            return [true, reason.LEFT_LEGS_OFF]\n        }\n\n        return [false, reason.MIGHT_BE_STABLE_MORE]\n    }\n}\n\nexport default HexapodSupportCheck\n","import LinkageIKSolver from \"./LinkageIKSolver\"\nimport HexapodSupportCheck from \"./HexapodSupportCheck\"\nimport { IKMessage } from \"./IKInfo\"\nimport {\n    POSITION_NAMES_LIST,\n    NUMBER_OF_LEGS,\n    POSITION_NAME_TO_AXIS_ANGLE_MAP,\n    MAX_ANGLES,\n} from \"../../constants\"\nimport {\n    vectorFromTo,\n    projectedVectorOntoPlane,\n    getUnitVector,\n    scaleVector,\n    addVectors,\n    angleBetween,\n    vectorLength,\n    isCounterClockwise,\n} from \"../../geometry\"\n\n/* * *\n\n.......\nGiven:\n.......\n\n{}. Dimensions of each leg { femur, tibia, gamma }\n[] bodyContactPoints\n[] groundContactPoints\n   - there are two lists which contains six items each. One item for each leg.\n{} axes { xAxis, zAxis }\n   xAxis and zAxis of the rotated hexapod's local coordinate frame wrt\n   world coordinate frame.\n\n.......\nDefinition:\n.......\n\nbodyContactPoint (x, y, z)\n- The point in 3d space which is a vertex of the hexagon.\n  This is where the leg is in contact with the body of the hexapod.\n\ngroundContactPoint (x, y, z)\n- The point in 3d space which we want the foot tip of\n  the leg to be. Where the leg is in contact with the ground plane of the world.\n\n.......\nFind:\n.......\n\n18 angles that represent the pose of the hexapod. Three angles for each leg.\n    {\n      rightMiddle: { alpha, beta, gamma },\n      ...\n      rightBack: { alpha, beta, gamma },\n    }\n\n    If no solution is found, make sure to explain why.\n\n.......\nAlgorithm:\n.......\n\nIf one of the vertices is below the ground z < 0,\nthen there is no solution. Early exit.\n\nFor each leg:\n    1. Derive a few properties about the leg given what you already know\n       which you'd later (see computeInitialProperties() for details )\n\n       This includes the coxiaPoint. If this coxiaPoint is below the ground\n        - then there is no solution. Early exit.\n\n    2. Compute the alpha of this leg. see (computeAlpha())\n       If alpha is not within range, then there is no solution. Early exit.\n\n    3. Solve for beta and gamma of this leg (see LegIKSolver module)\n      If a problem was encountered within this module, then there is no solution. Early exit.\n      If the beta and gamma are not within range, then there is no solution, early exit.\n\n    4. Sometimes the LegIKSolver module would return a solution where the leg\n       would not reach the target ground contact point. (this leg would be on the air)\n       If the combination of the legs in the air would produce an unstable pose\n       (e.g 4 legs are in the air or all left legs are in the air)\n       Then there is no solution. Early exit.\n       (see also HexapodSupportChecker)\n\n    If no problems are encountered, we have found a solution! Return!\n\n* * */\nclass IKSolver {\n    params = {}\n    partialPose = {}\n    pose = {}\n    foundSolution = false\n    legPositionsOffGround = []\n    message = IKMessage.initialized\n\n    solve(legDimensions, bodyContactPoints, groundContactPoints, axes) {\n        // prettier-ignore\n        this.params = {\n            bodyContactPoints, groundContactPoints, axes, legDimensions\n        }\n\n        if (this._hasBadVertex(bodyContactPoints)) {\n            return this\n        }\n\n        const { coxia, femur, tibia } = legDimensions\n\n        for (let i = 0; i < NUMBER_OF_LEGS; i++) {\n            const legPosition = POSITION_NAMES_LIST[i]\n\n            // prettier-ignore\n            const known = computeInitialLegProperties(\n                bodyContactPoints[i], groundContactPoints[i], axes.zAxis\n            )\n\n            if (known.coxiaPoint.z < 0) {\n                this._handleBadPoint(known.coxiaPoint)\n                return this\n            }\n\n            const legXaxisAngle = POSITION_NAME_TO_AXIS_ANGLE_MAP[legPosition]\n\n            // prettier-ignore\n            let alpha = computeAlpha(\n                known.coxiaUnitVector, legXaxisAngle, axes.xAxis, axes.zAxis\n            )\n\n            if (Math.abs(alpha) > MAX_ANGLES.alpha) {\n                // prettier-ignore\n                this._finalizeFailure(\n                    IKMessage.alphaNotInRange(legPosition, alpha, MAX_ANGLES.alpha)\n                )\n                return this\n            }\n\n            // prettier-ignore\n            const solvedLegParams = new LinkageIKSolver(legPosition)\n                .solve(coxia, femur, tibia, known.summa, known.rho)\n\n            if (!solvedLegParams.obtainedSolution) {\n                this._finalizeFailure(IKMessage.badLeg(solvedLegParams.message))\n                return this\n            }\n\n            if (!solvedLegParams.reachedTarget) {\n                if (this._hasNoMoreSupport(legPosition)) {\n                    return this\n                }\n            }\n\n            // prettier-ignore\n            this.partialPose[legPosition] = {\n                alpha, beta: solvedLegParams.beta, gamma: solvedLegParams.gamma\n            }\n        }\n\n        this._finalizeSuccess()\n        return this\n    }\n\n    get hasLegsOffGround() {\n        return this.legPositionsOffGround.length > 0 ? true : false\n    }\n\n    _hasNoMoreSupport(legPosition) {\n        this.legPositionsOffGround.push(legPosition)\n        const [noSupport, reason] = HexapodSupportCheck.checkSupport(\n            this.legPositionsOffGround\n        )\n        if (noSupport) {\n            const message = IKMessage.noSupport(reason, this.legPositionsOffGround)\n            this._finalizeFailure(message)\n            return true\n        }\n        return false\n    }\n\n    _handleBadPoint(point) {\n        this._finalizeFailure(IKMessage.badPoint(point))\n    }\n\n    _hasBadVertex(bodyContactPoints) {\n        for (let i = 0; i < NUMBER_OF_LEGS; i++) {\n            const vertex = bodyContactPoints[i]\n            if (vertex.z < 0) {\n                this._handleBadPoint(vertex)\n                return true\n            }\n        }\n        return false\n    }\n\n    _finalizeFailure(message) {\n        this.message = message\n        this.foundSolution = false\n    }\n\n    _finalizeSuccess() {\n        this.pose = this.partialPose\n        this.foundSolution = true\n        if (!this.hasLegsOffGround) {\n            this.message = IKMessage.success\n            return\n        }\n\n        this.message = IKMessage.successLegsOnAir(this.legPositionsOffGround)\n    }\n}\n\n/* * *\n\ncomputeInitialLegProperties()\n\n.......\nGiven:\n.......\n\n1. pB : bodyContactPoint in 3d space\n2. pG : groundContactPoint in 3d space\n3. coxia: distance from pB to pC\n4. zAxis: The vector normal to the hexapodBodyPlane\n\n.......\nFind:\n.......\n\n1. pC : coxiaPoint in 3d space\n2. coxiaVector: the vector from pB to Pc with a length of one\n3. coxiaUnitVector: A vector with the length of one\n    pointing at the direction of the unit vector\n4. rho: The angle made by pC, pB and pG, with pB at the center\n5. summa: The distance from pB to pG\n\npB   pC\n *---* -------- hexapodBodyPlane\n  \\   \\\n   \\   *\n    \\  /\n      * ------- groundPlane\n      pG\n\n.......\nIdea:\n.......\n\n1. Get the vector from pB to pG (bodyToFootVector)\n2. Project that vector to the hexapodBodyPlane (coxiaDirectionVector)\n   The direction of this vector is the direction of\n   coxiaVector and coxiaUnitVector\n\n   And with a little bit of geometry you derive verything you need.\n\n * * */\nconst computeInitialLegProperties = (\n    bodyContactPoint,\n    groundContactPoint,\n    zAxis,\n    coxia\n) => {\n    const bodyToFootVector = vectorFromTo(bodyContactPoint, groundContactPoint)\n\n    const coxiaDirectionVector = projectedVectorOntoPlane(bodyToFootVector, zAxis)\n    const coxiaUnitVector = getUnitVector(coxiaDirectionVector)\n    const coxiaVector = scaleVector(coxiaUnitVector, coxia)\n\n    const coxiaPoint = addVectors(bodyContactPoint, coxiaVector)\n\n    const rho = angleBetween(coxiaUnitVector, bodyToFootVector)\n    const summa = vectorLength(bodyToFootVector)\n\n    return {\n        coxiaUnitVector,\n        coxiaVector,\n        coxiaPoint,\n        rho,\n        summa,\n    }\n}\n\n/* * *\n\ncomputeAlpha()\n\n  hexapodYaxis\n  ^\n  |\n  * --> hexapodXaxis (xAxis)\n /\nhexapodZaxis (zAxis)\n\n...............\nExample #1 :\n...............\n\n             coxiaVector\n              ^\n              | legXaxis\n              |  /        * legXaxisAngle\n              | /            - Angle between legXaxis and hexapodXaxis\n    * -- * -- *                (in this example: +45 degrees )\n   /           \\\n  /             \\          * Alpha\n *       *       *            - Angle between legXaxis and coxiaVector\n  \\             /                (in this example: +45 degrees)\n   \\           /\n    * -- * -- *\n\n...............\nExample #2\n...............\n\n    * -- * -- *       * legXaxisAngle\n   /           \\          - (in this example: -45 degrees or +315 degrees)\n  /             \\      * Alpha\n *       *       *         - (in this example: -45 degrees)\n  \\             /\n   \\           /\n    * -- * -- *\n              |\\              - (in this example: +45 degrees )\n              | \\\n              | legXaxis\n              V\n              coxiaVector\n * * */\nconst computeAlpha = (coxiaVector, legXaxisAngle, xAxis, zAxis) => {\n    const sign = isCounterClockwise(coxiaVector, xAxis, zAxis) ? -1 : 1\n    const alphaWrtHexapod = sign * angleBetween(coxiaVector, xAxis)\n    const alpha = (alphaWrtHexapod - legXaxisAngle) % 360\n\n    if (alpha > 180) {\n        return alpha - 360\n    }\n    if (alpha < -180) {\n        return alpha + 360\n    }\n\n    // ❗❗❗THIS IS A HACK ❗❗❗\n    // THERE IS A BUG HERE SOMEWHERE, FIND IT\n    if (alpha === 180 || alpha === -180) {\n        return 0\n    }\n\n    return alpha\n}\n\nexport default IKSolver\n","import { POSITION_NAMES_LIST } from \"../../constants\"\nimport {\n    tRotZmatrix,\n    tRotXYZmatrix,\n    vectorFromTo,\n    angleBetween,\n    isCounterClockwise,\n} from \"../../geometry\"\nimport Vector from \"../../Vector\"\nimport VirtualHexapod from \"../../VirtualHexapod\"\nimport IKSolver from \"./IKSolver\"\n\nconst solveInverseKinematics = (\n    dimensions,\n    rawIKparams,\n    flags = { rotateThenShift: true }\n) => {\n    const [ikSolver, target_groundContactPoints] = solveHexapodParams(\n        dimensions,\n        rawIKparams,\n        flags.rotateThenShift\n    )\n\n    if (!ikSolver.foundSolution) {\n        return {\n            pose: null,\n            obtainedSolution: false,\n            message: ikSolver.message,\n            hexapod: null,\n        }\n    }\n\n    // How the hexapod looks like if the center of gravity is at (0, 0, _)\n    const currentHexapod = new VirtualHexapod(dimensions, ikSolver.pose)\n    const excludedPositions = ikSolver.legPositionsOffGround\n\n    const pivots = findTwoPivotPoints(\n        currentHexapod.groundContactPoints,\n        target_groundContactPoints,\n        excludedPositions\n    )\n\n    const hexapod = pivots.foundTwoPoints\n        ? rotateShiftHexapodgivenPivots(currentHexapod, pivots.points1, pivots.points2)\n        : currentHexapod\n\n    return {\n        pose: ikSolver.pose,\n        obtainedSolution: true,\n        message: ikSolver.message,\n        hexapod,\n    }\n}\n\n/* * *\n    Returns a two-element array\n    1. ikSolver: IKSolver object\n    2. An array of target ground contact points\n * * */\nconst solveHexapodParams = (dimensions, rawIKparams, rotateThenShift) => {\n    const { tVec, rotMatrix, startPose } = convertIKparams(dimensions, rawIKparams)\n    const startHexapod = new VirtualHexapod(dimensions, startPose)\n\n    const targets = buildHexapodTargets(startHexapod, rotMatrix, tVec, {\n        rotateThenShift,\n    })\n\n    // Solve for the pose of the hexapod if it exists\n    const ikSolver = new IKSolver().solve(\n        startHexapod.legDimensions,\n        targets.bodyContactPoints,\n        targets.groundContactPoints,\n        targets.axes\n    )\n\n    return [ikSolver, targets.groundContactPoints]\n}\n\n// Make sure all parameter values are numbers\nconst rawParamsToNumbers = rawParams =>\n    Object.entries(rawParams).reduce(\n        (params, [key, val]) => ({ ...params, [key]: Number(val) }),\n        {}\n    )\n\n// tx, ty, and tz are within the range of (-1, 1)\n// return the actual values we want the hexapod's center of gravity to be at\nconst convertFromPercentToTranslateValues = (tx, ty, tz, middle, side, tibia) => {\n    const shiftX = tx * middle\n    const shiftY = ty * side\n    const shiftZ = tz * tibia\n    return new Vector(shiftX, shiftY, shiftZ)\n}\n\n/* * *\n\nstartPose:\n    - The pose of the hexapod before we\n        rotate and translate the hexapod\n    - The body (hexagon) is flat at this point\n    - At the very end, we want the hexapod\n        to step on the same place as at this pose\n        (ie same ground contact points)\n\n * * */\nconst buildStartPose = (hipStance, legStance) => {\n    const betaAndGamma = { beta: legStance, gamma: -legStance }\n    const alphas = [0, -hipStance, hipStance, 0, -hipStance, hipStance]\n\n    return alphas.reduce((pose, alpha, index) => {\n        const positionName = POSITION_NAMES_LIST[index]\n        pose[positionName] = { alpha, ...betaAndGamma }\n        return pose\n    }, {})\n}\n\n/* * *\n\ncompute for the following:\n\nstartPose:\n    - The pose of the hexapod before we\n        rotate and translate the hexapod\n    - see function buildStartPose() for details\n\nrotateMatrix:\n    - The transformation matrix we would use to\n        rotate the hexapod's body\n\ntVec\n    - The translation vector we would use to\n        shift the hexapod's body\n\n * * */\nconst convertIKparams = (dimensions, rawIKparams) => {\n    const IKparams = rawParamsToNumbers(rawIKparams)\n\n    const { middle, side, tibia } = dimensions\n    const { tx, ty, tz } = IKparams\n\n    // prettier-ignore\n    const tVec = convertFromPercentToTranslateValues(\n        tx, ty, tz, middle, side, tibia\n    )\n\n    const { hipStance, legStance } = IKparams\n    const startPose = buildStartPose(hipStance, legStance)\n\n    const { rx, ry, rz } = IKparams\n    const rotMatrix = tRotXYZmatrix(rx, ry, rz)\n\n    return { tVec, startPose, rotMatrix }\n}\n\n/* * *\n\ncompute the parameters required to solve\nfor the hexapod's inverse kinematics\n\nsee IKSolver() class for details.\n\n * * */\nconst buildHexapodTargets = (hexapod, rotMatrix, tVec, { rotateThenShift }) => {\n    const groundContactPoints = hexapod.legs.map(leg => leg.maybeGroundContactPoint)\n\n    const bodyContactPoints = rotateThenShift\n        ? hexapod.body.cloneTrot(rotMatrix).cloneShift(tVec.x, tVec.y, tVec.z)\n              .verticesList\n        : hexapod.body.cloneShift(tVec.x, tVec.y, tVec.z).cloneTrot(rotMatrix)\n              .verticesList\n\n    const axes = {\n        xAxis: new Vector(1, 0, 0).cloneTrot(rotMatrix),\n        zAxis: new Vector(0, 0, 1).cloneTrot(rotMatrix),\n    }\n\n    return { groundContactPoints, bodyContactPoints, axes }\n}\n\n/* * *\n\nWe know 2 point positions that we know are\nfoot tip ground contact points\n(position ie \"rightMiddle\" etc)\n\nThe given `hexapod` is stepping at the `current` points\n\nWe want to return a hexapod that is\nshifted and rotated it so that those\ntwo points would be stepping at their\nrespective `target` points\n\n * * */\nconst rotateShiftHexapodgivenPivots = (hexapod, points1, points2) => {\n    const targetVector = vectorFromTo(points1.target, points2.target)\n    const currentVector = vectorFromTo(points1.current, points2.current)\n\n    const twistAngleAbsolute = angleBetween(currentVector, targetVector)\n    const isCCW = isCounterClockwise(currentVector, targetVector, new Vector(0, 0, 1))\n    const twistAngle = isCCW ? twistAngleAbsolute : -twistAngleAbsolute\n    const twistMatrix = tRotZmatrix(twistAngle)\n\n    const twistedCurrentPoint1 = points1.current.cloneTrot(twistMatrix)\n    const translateVector = vectorFromTo(twistedCurrentPoint1, points1.target)\n\n    const pivotedHexapod = hexapod\n        .cloneTrot(twistMatrix)\n        .cloneShift(translateVector.x, translateVector.y, 0)\n\n    return pivotedHexapod\n}\n\n/* * *\n\ngiven the points where the hexapod should step on\n\nFind two foot tips as pivot points\nthat we can use to shift and twist the current Hexapod\n\n * * */\nconst findTwoPivotPoints = (currentPoints, targetPoints, excludedPositions) => {\n    const targetPointsMap = targetPoints.reduce((acc, point) => {\n        acc[point.name] = point\n        return acc\n    }, {})\n\n    const targetPointNames = Object.keys(targetPointsMap)\n\n    let [currentPoint1, currentPoint2] = [null, null]\n    let [targetPoint1, targetPoint2] = [null, null]\n\n    for (let i = 0; i < currentPoints.length; i++) {\n        const currentPoint = currentPoints[i]\n        const currentName = currentPoint.name\n        if (excludedPositions.includes(currentName)) {\n            continue\n        }\n\n        if (targetPointNames.includes(currentName)) {\n            if (currentPoint1 === null) {\n                currentPoint1 = currentPoint\n                targetPoint1 = targetPointsMap[currentName]\n            } else {\n                currentPoint2 = currentPoint\n                targetPoint2 = targetPointsMap[currentName]\n                break\n            }\n        }\n    }\n\n    if (currentPoint2 === null) {\n        return { foundTwoPoints: false }\n    }\n\n    return {\n        points1: { target: targetPoint1, current: currentPoint1 },\n        points2: { target: targetPoint2, current: currentPoint2 },\n        foundTwoPoints: true,\n    }\n}\n\nexport default solveInverseKinematics\nexport { solveHexapodParams }\n","import { DATA, SCENE, LAYOUT, CAMERA_VIEW } from \"../templates\"\n\nconst _getSumOfDimensions = dimensions =>\n    Object.values(dimensions).reduce((sum, dimension) => sum + dimension, 0)\n\nconst _drawHexapod = hexapod => {\n    const polygonVertices = hexapod.body.closedPointsList\n    const bodyX = polygonVertices.map(point => point.x)\n    const bodyY = polygonVertices.map(point => point.y)\n    const bodyZ = polygonVertices.map(point => point.z)\n    const { head, cog } = hexapod.body\n    const { cogProjection, legs, groundContactPoints } = hexapod\n\n    const dBodyMesh = {\n        ...DATA[0],\n        x: bodyX,\n        y: bodyY,\n        z: bodyZ,\n    }\n\n    const dBodyOutline = {\n        ...DATA[1],\n        x: bodyX,\n        y: bodyY,\n        z: bodyZ,\n    }\n\n    const dHead = {\n        ...DATA[2],\n        x: [head.x],\n        y: [head.y],\n        z: [head.z],\n    }\n\n    const dCog = {\n        ...DATA[3],\n        x: [cog.x],\n        y: [cog.y],\n        z: [cog.z],\n    }\n\n    const dCogProjection = {\n        ...DATA[4],\n        x: [cogProjection.x],\n        y: [cogProjection.y],\n        z: [cogProjection.z],\n    }\n\n    const dLegs = legs.map((leg, index) => ({\n        ...DATA[index + 5],\n        x: leg.allPointsList.map(point => point.x),\n        y: leg.allPointsList.map(point => point.y),\n        z: leg.allPointsList.map(point => point.z),\n    }))\n\n    const dSupportPolygon = {\n        ...DATA[11],\n        x: groundContactPoints.map(point => point.x),\n        y: groundContactPoints.map(point => point.y),\n        z: groundContactPoints.map(point => point.z),\n    }\n\n    const axisScale = hexapod.body.dimensions.front / 2\n    const { xAxis, yAxis, zAxis } = hexapod.localAxes\n    const hXaxis = {\n        ...DATA[12],\n        x: [cog.x, cog.x + axisScale * xAxis.x],\n        y: [cog.y, cog.y + axisScale * xAxis.y],\n        z: [cog.z, cog.z + axisScale * xAxis.z],\n    }\n\n    const hYaxis = {\n        ...DATA[13],\n        x: [cog.x, cog.x + axisScale * yAxis.x],\n        y: [cog.y, cog.y + axisScale * yAxis.y],\n        z: [cog.z, cog.z + axisScale * yAxis.z],\n    }\n\n    const hZaxis = {\n        ...DATA[14],\n        x: [cog.x, cog.x + axisScale * zAxis.x],\n        y: [cog.y, cog.y + axisScale * zAxis.y],\n        z: [cog.z, cog.z + axisScale * zAxis.z],\n    }\n\n    const wXaxis = {\n        ...DATA[15],\n        x: [0, axisScale],\n    }\n\n    const wYaxis = {\n        ...DATA[16],\n        y: [0, axisScale],\n    }\n\n    const wZaxis = {\n        ...DATA[17],\n        z: [0, axisScale],\n    }\n\n    return [\n        dBodyMesh,\n        dBodyOutline,\n        dHead,\n        dCog,\n        dCogProjection,\n        ...dLegs,\n        dSupportPolygon,\n        hXaxis,\n        hYaxis,\n        hZaxis,\n        wXaxis,\n        wYaxis,\n        wZaxis,\n    ]\n}\n\nconst getNewPlotParams = (hexapod, cameraView) => {\n    const data = _drawHexapod(hexapod)\n    if ([null, undefined, {}].includes(cameraView)) {\n        cameraView = CAMERA_VIEW\n    }\n    const range = _getSumOfDimensions(hexapod.dimensions)\n    const newRange = [-range, range]\n    const xaxis = { ...SCENE.xaxis, range: newRange }\n    const yaxis = { ...SCENE.yaxis, range: newRange }\n    const zaxis = { ...SCENE.zaxis, range: [-10, 2 * range - 10] }\n    const scene = {\n        ...SCENE,\n        xaxis,\n        yaxis,\n        zaxis,\n        camera: cameraView,\n    }\n\n    const layout = { ...LAYOUT, scene }\n\n    return [data, layout]\n}\n\nexport default getNewPlotParams\n","import React from \"react\"\nimport { GiCoffeeMug } from \"react-icons/gi\"\nimport { FaGithubAlt, FaTimes, FaCheck, FaHome, FaSquare } from \"react-icons/fa\"\nimport { GrStatusGoodSmall } from \"react-icons/gr\"\n\nconst SECTION_NAMES = {\n    dimensions: \"Dimensions\",\n    inverseKinematics: \"Inverse Kinematics\",\n    forwardKinematics: \"Forward Kinematics\",\n    legPatterns: \"Leg Patterns\",\n    landingPage: \"Root\",\n    walkingGaits: \"Walking Gaits\",\n}\n\nconst PATH_NAMES = {\n    inverseKinematics: \"/inverse-kinematics\",\n    forwardKinematics: \"/forward-kinematics\",\n    legPatterns: \"/leg-patterns\",\n    landingPage: \"/\",\n    walkingGaits: \"/walking-gaits\",\n}\n\nconst ANGLE_NAMES = [\"alpha\", \"beta\", \"gamma\"]\nconst DIMENSION_NAMES = [\"front\", \"side\", \"middle\", \"coxia\", \"femur\", \"tibia\"]\nconst LEG_NAMES = [\n    \"leftFront\",\n    \"rightFront\",\n    \"leftMiddle\",\n    \"rightMiddle\",\n    \"leftBack\",\n    \"rightBack\",\n]\n\nconst IK_SLIDERS_LABELS = [\"tx\", \"ty\", \"tz\", \"rx\", \"ry\", \"rz\", \"hipStance\", \"legStance\"]\nconst RESET_LABEL = \"reset\"\n\nconst GAIT_SLIDER_LABELS = [\n    \"hipSwing\",\n    \"liftSwing\",\n    \"legStance\",\n    \"hipStance\",\n    \"tx\",\n    \"tz\",\n    \"rx\",\n    \"ry\",\n    \"stepCount\",\n]\n\n/*************\n * RANGE PARAMS\n *************/\n\nconst rangeParams = absVal => ({ minVal: -absVal, maxVal: absVal, stepVal: 0.01 })\nconst RANGES = {\n    30: rangeParams(30),\n    45: rangeParams(45),\n    60: rangeParams(60),\n    90: rangeParams(90),\n    180: rangeParams(180),\n}\n\nconst translateInputs = { minVal: -1, maxVal: 1, stepVal: 0.01 }\n\nconst RANGE_PARAMS = {\n    dimensionInputs: { minVal: 0, maxVal: Infinity, stepVal: 1 },\n    tx: translateInputs,\n    ty: translateInputs,\n    tz: translateInputs,\n    rx: RANGES[30],\n    ry: RANGES[30],\n    rz: RANGES[60],\n    legStance: RANGES[90],\n    hipStance: RANGES[60],\n    alpha: RANGES[90],\n    beta: RANGES[180],\n    gamma: RANGES[180],\n}\n\nconst GAIT_RANGE_PARAMS = {\n    tx: { minVal: -0.25, maxVal: 0.25, stepVal: 0.01, defaultVal: 0 },\n    tz: { minVal: -0.5, maxVal: 0.5, stepVal: 0.01, defaultVal: 0 },\n    rx: { minVal: -15, maxVal: 15, stepVal: 0.5, defaultVal: 0 },\n    ry: { minVal: -15, maxVal: 15, stepVal: 0.5, defaultVal: 0 },\n    legStance: { minVal: -50, maxVal: 50, stepVal: 0.5, defaultVal: 0 },\n    hipStance: { minVal: 0, maxVal: 40, stepVal: 0.5, defaultVal: 20 },\n    hipSwing: { minVal: 10, maxVal: 40, stepVal: 0.5, defaultVal: 25 },\n    liftSwing: { minVal: 10, maxVal: 70, stepVal: 0.5, defaultVal: 40 },\n    stepCount: { minVal: 3, maxVal: 7, stepVal: 1, defaultVal: 5 },\n}\n/*************\n * ICONS\n *************/\n\nconst ICON_COMPONENTS = {\n    mug: <GiCoffeeMug className=\"vertical-align\" />,\n    circle: <GrStatusGoodSmall className=\"small-icon\" />,\n    square: <FaSquare className=\"small-icon\" />,\n    octocat: <FaGithubAlt className=\"vertical-align\" />,\n    check: <FaCheck className=\"vertical-align\" />,\n    times: <FaTimes className=\"vertical-align\" />,\n    home: <FaHome className=\"vertical-align\" />,\n}\n\n/*************\n * NAVIGATION\n *************/\n\nconst PATHS = {\n    inverseKinematics: {\n        path: PATH_NAMES.inverseKinematics,\n        description: SECTION_NAMES.inverseKinematics,\n        icon: ICON_COMPONENTS.circle,\n    },\n    forwardKinematics: {\n        path: PATH_NAMES.forwardKinematics,\n        description: SECTION_NAMES.forwardKinematics,\n        icon: ICON_COMPONENTS.circle,\n    },\n    legPatterns: {\n        path: PATH_NAMES.legPatterns,\n        description: SECTION_NAMES.legPatterns,\n        icon: ICON_COMPONENTS.circle,\n    },\n    landingPage: {\n        path: PATH_NAMES.landingPage,\n        description: SECTION_NAMES.landingPage,\n        icon: ICON_COMPONENTS.home,\n    },\n\n    walkingGaits: {\n        path: PATH_NAMES.walkingGaits,\n        description: SECTION_NAMES.walkingGaits,\n        icon: ICON_COMPONENTS.circle,\n    },\n}\n\nconst KOFI_LINK_PROPERTIES = {\n    name: \"KOFI\",\n    icon: ICON_COMPONENTS.mug,\n    description: \"Buy Mithi Ko-Fi 🍵\",\n    url: \"https://ko-fi.com/minimithi\",\n}\n\nconst REPO_LINK_PROPERTIES = {\n    name: \"REPO\",\n    icon: ICON_COMPONENTS.octocat,\n    description: \"Source Code\",\n    url: \"https://github.com/mithi/hexapod\",\n}\n\nconst PATH_LINKS = [\n    PATHS.inverseKinematics,\n    PATHS.forwardKinematics,\n    PATHS.legPatterns,\n    PATHS.walkingGaits,\n    PATHS.landingPage,\n]\n\nconst URL_LINKS = [KOFI_LINK_PROPERTIES, REPO_LINK_PROPERTIES]\n\n/*************\n * LANDING PAGE\n *************/\n\nconst LANDING_PAGE_MESSAGE = `\n\n# Mithi's Bare Minimum Hexapod Robot Simulator\n\nEnjoy your stay and share with your friends!\n`\n\nexport {\n    ICON_COMPONENTS,\n    LANDING_PAGE_MESSAGE,\n    SECTION_NAMES,\n    ANGLE_NAMES,\n    DIMENSION_NAMES,\n    LEG_NAMES,\n    IK_SLIDERS_LABELS,\n    GAIT_SLIDER_LABELS,\n    RESET_LABEL,\n    PATHS,\n    URL_LINKS,\n    PATH_LINKS,\n    RANGE_PARAMS,\n    GAIT_RANGE_PARAMS,\n}\n","import React from \"react\"\nimport { URL_LINKS, PATH_LINKS } from \"./vars\"\nimport { Link } from \"react-router-dom\"\n\nconst NAV_BULLETS_PREFIX = \"navBullet\"\nconst NAV_DETAILED_PREFIX = \"navDetailed\"\n\nconst BulletPageLink = ({ link, showDesc }) => (\n    <li>\n        <Link to={link.path} className=\"link-icon\">\n            <span>\n                {link.icon} {showDesc ? link.description : null}\n            </span>\n        </Link>\n    </li>\n)\n\nconst BulletUrlLink = ({ path, description, icon }) => (\n    <li>\n        <a\n            href={path}\n            className=\"link-icon\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            children={\n                <span>\n                    {icon} {description}\n                </span>\n            }\n        />\n    </li>\n)\n\nconst NavBullets = () => (\n    <ul className=\"row-container no-bullet\" id=\"top-bar\">\n        {URL_LINKS.map(link => (\n            <BulletUrlLink\n                path={link.url}\n                key={NAV_BULLETS_PREFIX + link.url}\n                icon={link.icon}\n            />\n        ))}\n\n        {PATH_LINKS.map(link => (\n            <BulletPageLink key={NAV_BULLETS_PREFIX + link.path} link={link} />\n        ))}\n    </ul>\n)\n\nconst NavDetailed = () => (\n    <footer>\n        <nav id=\"nav\">\n            <ul className=\"grid-cols-1 no-bullet\">\n                {URL_LINKS.map(link => (\n                    <BulletUrlLink\n                        path={link.url}\n                        key={NAV_DETAILED_PREFIX + link.url}\n                        icon={link.icon}\n                        description={link.description}\n                    />\n                ))}\n\n                {PATH_LINKS.map(link => (\n                    <BulletPageLink\n                        key={NAV_DETAILED_PREFIX + link.path}\n                        link={link}\n                        showDesc={true}\n                    />\n                ))}\n            </ul>\n        </nav>\n    </footer>\n)\n\nconst Nav = () => <NavBullets />\n\nexport { Nav, NavDetailed }\n","import React from \"react\"\nimport Plotly from \"plotly.js-gl3d-dist-min\"\nimport createPlotlyComponent from \"react-plotly.js/factory\"\nconst Plot = createPlotlyComponent(Plotly)\n\nconst HexapodPlot = ({ data, layout, onRelayout, revision }) => {\n    const props = {\n        data,\n        layout,\n        onRelayout,\n        revision,\n        config: { displaylogo: false, responsive: true },\n        style: { height: \"100%\", width: \"100%\" },\n        useResizeHandler: true,\n    }\n    return <Plot {...props} />\n}\n\nexport default HexapodPlot\n","import React, { Component } from \"react\"\n\nclass InputField extends Component {\n    state = { message: null }\n\n    constructor(props) {\n        super(props)\n        this.myRef = React.createRef()\n    }\n\n    componentDidMount() {\n        this.setState({ message: null })\n    }\n\n    handleChange(value) {\n        const { minVal, maxVal, stepVal } = this.props.rangeParams\n        const validity = this.myRef.current.validity\n\n        if (validity.badInput) {\n            this.setState({ message: \"NaN\" })\n            return\n        }\n\n        if (validity.rangeOverflow) {\n            this.setState({ message: `max=${maxVal}` })\n            return\n        }\n\n        if (validity.rangeUnderflow) {\n            this.setState({ message: `min=${minVal}` })\n            return\n        }\n\n        if (validity.stepMismatch) {\n            this.setState({ message: `step=${stepVal}` })\n            return\n        }\n\n        if (!this.myRef.current.checkValidity()) {\n            this.setState({ message: \"Error\" })\n            return\n        }\n\n        const numberValue = parseFloat(value)\n\n        if (isNaN(numberValue)) {\n            this.setState({ message: \"NaN\" })\n            return\n        }\n\n        this.setState({ message: null })\n        this.props.handleChange(this.props.name, numberValue)\n    }\n\n    render() {\n        const { name, rangeParams, id, value } = this.props\n        const newId = id || name\n        const { minVal, maxVal, stepVal } = rangeParams\n        const props = {\n            type: \"number\",\n            input: \"numeric\",\n            id: newId,\n            ref: this.myRef,\n            value,\n            min: minVal,\n            max: maxVal,\n            step: stepVal,\n            style: { margin: 0 },\n        }\n\n        return (\n            <div>\n                <label htmlFor={newId} className=\"label\">\n                    {name}\n                </label>\n                <input {...props} onChange={e => this.handleChange(e.target.value)} />\n                <label className=\"label red\" style={{ opacity: 1 }}>\n                    {this.state.message}\n                </label>\n            </div>\n        )\n    }\n}\n\nexport default InputField\n","import React from \"react\"\nimport ReactMarkdown from \"react-markdown\"\nimport { ICON_COMPONENTS, RESET_LABEL } from \"../vars\"\n\nconst AlertBox = ({ info }) => (\n    <div className=\"message\">\n        <h2 className=\"red\">\n            {ICON_COMPONENTS.times} {info.subject}\n        </h2>\n        <ReactMarkdown source={info.body} />\n    </div>\n)\n\nconst ToggleSwitch = ({ id, value, handleChange, showValue }) => (\n    <div className=\"switch-container\">\n        <label className=\"switch\" htmlFor={id}>\n            <input id={id} type=\"checkbox\" value={value} onChange={handleChange} />\n            <span className=\"toggle-switch-widget round\"></span>\n        </label>\n        <label className=\"label\" htmlFor={id}>\n            {showValue ? value : null}\n        </label>\n    </div>\n)\n\nconst Card = ({ title, other, children }) => (\n    <div>\n        <div className=\"row-container flex-wrap\">\n            {title}\n            {other}\n        </div>\n        {children}\n    </div>\n)\n\nconst BasicButton = ({ handleClick, children }) => (\n    <button type=\"button\" className=\"button\" onClick={handleClick}>\n        {children}\n    </button>\n)\n\nconst ResetButton = ({ reset }) => (\n    <BasicButton handleClick={reset}>{RESET_LABEL}</BasicButton>\n)\n\nexport { AlertBox, Card, ToggleSwitch, BasicButton, ResetButton }\n","import React, { Component } from \"react\"\nimport NumberInputField from \"./generic/NumberInputField\"\nimport { Card, ResetButton, ToggleSwitch } from \"./generic/SmallWidgets\"\nimport { DEFAULT_DIMENSIONS } from \"../templates\"\nimport { SECTION_NAMES, DIMENSION_NAMES, RANGE_PARAMS } from \"./vars\"\n\nclass DimensionsWidget extends Component {\n    sectionName = SECTION_NAMES.dimensions\n    state = { isFine: true }\n\n    reset = () => this.props.onUpdate(DEFAULT_DIMENSIONS)\n\n    toggleMode = () => this.setState({ isFine: !this.state.isFine })\n\n    updateFieldState = (name, value) => this.updateDimensions(name, value)\n\n    updateDimensions = (name, value) => {\n        const dimensions = { ...this.props.params.dimensions, [name]: value }\n        this.props.onUpdate(dimensions)\n    }\n\n    get toggleSwitch() {\n        const props = {\n            id: \"DimensionsWidgetSwitch\",\n            value: this.state.isFine ? \"1x\" : \"5x\",\n            handleChange: this.toggleMode,\n            showValue: true,\n        }\n\n        return <ToggleSwitch {...props} />\n    }\n\n    get NumberInputFields() {\n        const { minVal, maxVal } = RANGE_PARAMS.dimensionInputs\n        const stepVal = this.state.isFine ? 1 : 5\n        const dimensions = this.props.params.dimensions\n\n        const numberInputFields = DIMENSION_NAMES.map(name => {\n            const props = {\n                name,\n                value: dimensions[name],\n                rangeParams: { minVal, maxVal, stepVal },\n                handleChange: this.updateFieldState,\n            }\n\n            return <NumberInputField {...props} key={name} />\n        })\n\n        return <div className=\"grid-cols-6\">{numberInputFields}</div>\n    }\n\n    render = () => (\n        <Card title={<h2>{this.sectionName}</h2>} other={this.toggleSwitch}>\n            {this.NumberInputFields}\n            <ResetButton reset={this.reset} />\n        </Card>\n    )\n}\n\nexport default DimensionsWidget\n","import React from \"react\"\nimport { RANGE_PARAMS } from \"../vars\"\n/* *\n *\n * ................\n * props of Slider component:\n * ................\n *   name: Label of the slider\n *   attributes: [minimum, maximum, step]\n *   value: current value (to be displayed)\n *   handleChange: callback to call when slider changes\n *\n * */\nconst Slider = ({ name, id, value, rangeParams, handleChange }) => (\n    <div className=\"slider-container cell\">\n        <div className=\"label\">\n            <label htmlFor={id || name}>{name}</label>: <span>{value}</span>\n        </div>\n        <input\n            type=\"range\"\n            id={id || name}\n            min={rangeParams.minVal}\n            max={rangeParams.maxVal}\n            step={rangeParams.stepVal}\n            value={value}\n            onChange={e => handleChange(name, e.target.value)}\n            className=\"slider\"\n        />\n    </div>\n)\n\nconst sliderList = ({ names, values, handleChange, rangeParams }) =>\n    names.map(name => (\n        <Slider\n            key={name}\n            name={name}\n            rangeParams={rangeParams ? rangeParams[name] : RANGE_PARAMS[name]}\n            handleChange={handleChange}\n            value={values[name]}\n        />\n    ))\n\nexport { Slider, sliderList }\n","import React, { Component } from \"react\"\nimport { Card } from \"../generic\"\nimport { ANGLE_NAMES, RANGE_PARAMS } from \"../vars\"\n\nclass LegPoseWidget extends Component {\n    updateFieldState = (angle, value) => {\n        const numberValue = Number(value)\n        if (!isNaN(numberValue)) {\n            this.props.onUpdate(this.props.name, angle, numberValue)\n        }\n    }\n\n    fields = Component => {\n        return ANGLE_NAMES.map(angle => {\n            const id = `${this.props.name}-${angle}`\n            const props = {\n                id,\n                name: angle,\n                key: id,\n                value: this.props.pose[angle],\n                rangeParams: RANGE_PARAMS[angle],\n                handleChange: this.updateFieldState,\n            }\n\n            return <Component {...props} />\n        })\n    }\n\n    render = () => (\n        <Card title={<h3>{this.props.name}</h3>}>\n            <div className={this.props.renderStacked ? \"grid-cols-1\" : \"grid-cols-3\"}>\n                {this.fields(this.props.WidgetType)}\n            </div>\n        </Card>\n    )\n}\n\nexport default LegPoseWidget\n","import React, { Component } from \"react\"\nimport { renderToString } from \"react-dom/server\"\nimport LegPoseWidget from \"./LegPoseWidgets\"\nimport { Card, ToggleSwitch, ResetButton, NumberInputField, Slider } from \"../generic\"\nimport { DEFAULT_POSE } from \"../../templates\"\nimport { SECTION_NAMES, LEG_NAMES } from \"../vars\"\n\nclass ForwardKinematicsPage extends Component {\n    pageName = SECTION_NAMES.forwardKinematics\n    state = { WidgetType: NumberInputField }\n\n    componentDidMount = () => this.props.onMount(this.pageName)\n\n    reset = () => this.props.onUpdate(DEFAULT_POSE)\n\n    updatePose = (name, angle, value) => {\n        const pose = this.props.params.pose\n        const newPose = {\n            ...pose,\n            [name]: { ...pose[name], [angle]: value },\n        }\n        this.props.onUpdate(newPose)\n    }\n\n    toggleMode = () => {\n        const WidgetType = this.state.WidgetType === Slider ? NumberInputField : Slider\n        this.setState({ WidgetType })\n    }\n\n    legPoseWidget = name => (\n        <LegPoseWidget\n            key={name}\n            name={name}\n            pose={this.props.params.pose[name]}\n            onUpdate={this.updatePose}\n            WidgetType={this.state.WidgetType}\n            renderStacked={this.state.WidgetType === Slider}\n        />\n    )\n\n    get toggleSwitch() {\n        const props = {\n            id: \"FwdKinematicsSwitch\",\n            value: renderToString(this.state.WidgetType),\n            handleChange: this.toggleMode,\n            showValue: false,\n        }\n\n        return <ToggleSwitch {...props} />\n    }\n\n    render = () => (\n        <Card title={<h2>{this.pageName}</h2>} other={this.toggleSwitch}>\n            <div className=\"grid-cols-2\">\n                {LEG_NAMES.map(name => this.legPoseWidget(name))}\n            </div>\n            <ResetButton reset={this.reset} />\n        </Card>\n    )\n}\n\nexport default ForwardKinematicsPage\n","import React from \"react\"\nimport ReactMarkdown from \"react-markdown\"\nimport { POSITION_NAMES_LIST } from \"../../hexapod\"\n\nconst POSITION_ALIAS = {\n    rightMiddle: \"rm\",\n    rightFront: \"rf\",\n    leftFront: \"lf\",\n    leftMiddle: \"lm\",\n    leftBack: \"lb\",\n    rightBack: \"rb\",\n}\n\nconst formatPose = pose =>\n    POSITION_NAMES_LIST.reduce((formattedPose, position) => {\n        const alias = POSITION_ALIAS[position]\n        const { alpha, beta, gamma } = pose[position]\n        formattedPose[alias] = {\n            alpha: Number(alpha).toFixed(2),\n            beta: Number(beta).toFixed(2),\n            gamma: Number(gamma).toFixed(2),\n        }\n        return formattedPose\n    }, {})\n\nconst poseMessage = ({ rm, rf, lf, lm, lb, rb }) => `\n\n| POSITION    | ALPHA       | BETA        | GAMMA       |\n|-------------|:-----------:|:-----------:|:-----------:|\n| rightMiddle | ${rm.alpha} | ${rm.beta}  | ${rm.gamma} |\n| rightFront  | ${rf.alpha} | ${rf.beta}  | ${rf.gamma} |\n| leftFront   | ${lf.alpha} | ${lf.beta}  | ${lf.gamma} |\n| leftMiddle  | ${lm.alpha} | ${lm.beta}  | ${lm.gamma} |\n| leftBack    | ${lb.alpha} | ${lb.beta}  | ${lb.gamma} |\n| rightBack   | ${rb.alpha} | ${rb.beta}  | ${rb.gamma} |\n\n`\n\nconst poseTable = ({ pose }) => {\n    const formattedPose = formatPose(pose)\n    const { rm, rf, lf, lm, lb, rb } = formattedPose\n    const markdownMessage = poseMessage({ rm, rf, lf, lm, lb, rb })\n    return (\n        <div className=\"table-container\">\n            <ReactMarkdown source={markdownMessage} />\n        </div>\n    )\n}\n\nexport default poseTable\n","import React, { Component } from \"react\"\nimport { sliderList, Card, ResetButton, AlertBox } from \"../generic\"\nimport { solveInverseKinematics } from \"../../hexapod\"\nimport { SECTION_NAMES, IK_SLIDERS_LABELS } from \"../vars\"\nimport { DEFAULT_IK_PARAMS } from \"../../templates\"\nimport PoseTable from \"./PoseTable\"\n\nclass InverseKinematicsPage extends Component {\n    pageName = SECTION_NAMES.inverseKinematics\n    state = { ikParams: DEFAULT_IK_PARAMS, errorMessage: null }\n\n    componentDidMount = () => this.props.onMount(this.pageName)\n\n    reset = () => {\n        const result = solveInverseKinematics(\n            this.props.params.dimensions,\n            DEFAULT_IK_PARAMS\n        )\n        this.updateHexapodPlot(result.hexapod, DEFAULT_IK_PARAMS)\n    }\n\n    updateHexapodPlot = (hexapod, ikParams) => {\n        this.setState({ ikParams, errorMessage: null })\n        this.props.onUpdate(hexapod)\n    }\n\n    updateIkParams = (name, value) => {\n        const ikParams = { ...this.state.ikParams, [name]: value }\n        const result = solveInverseKinematics(this.props.params.dimensions, ikParams)\n\n        if (!result.obtainedSolution) {\n            this.props.onUpdate(null)\n            this.setState({ errorMessage: result.message })\n            return\n        }\n\n        this.updateHexapodPlot(result.hexapod, ikParams)\n    }\n\n    get sliders() {\n        return sliderList({\n            names: IK_SLIDERS_LABELS,\n            values: this.state.ikParams,\n            handleChange: this.updateIkParams,\n        })\n    }\n\n    get additionalInfo() {\n        if (this.state.errorMessage) {\n            return <AlertBox info={this.state.errorMessage} />\n        }\n\n        return <PoseTable pose={this.props.params.pose} />\n    }\n\n    render = () => (\n        <Card title={<h2>{this.pageName}</h2>}>\n            <div className=\"grid-cols-3\">{this.sliders.slice(0, 6)}</div>\n            <div className=\"grid-cols-2\">{this.sliders.slice(6, 8)}</div>\n            <ResetButton reset={this.reset} />\n            {this.additionalInfo}\n        </Card>\n    )\n}\n\nexport default InverseKinematicsPage\n","import React from \"react\"\nimport ReactMarkdown from \"react-markdown\"\nimport { NavDetailed } from \"..\"\nimport { LANDING_PAGE_MESSAGE, SECTION_NAMES } from \"../vars\"\n\nclass LandingPage extends React.Component {\n    pageName = SECTION_NAMES.landingPage\n\n    componentDidMount = () => this.props.onMount(this.pageName)\n\n    render = () => (\n        <>\n            <div className=\"hexapod-img\" />{\" \"}\n            <div id=\"landing\">\n                <ReactMarkdown source={LANDING_PAGE_MESSAGE} />\n            </div>\n            <NavDetailed />\n        </>\n    )\n}\n\nexport default LandingPage\n","import React, { Component } from \"react\"\nimport { sliderList, Card, ResetButton } from \"../generic\"\nimport { DEFAULT_POSE, DEFAULT_PATTERN_PARAMS } from \"../../templates\"\nimport { SECTION_NAMES, ANGLE_NAMES } from \"../vars\"\n\nclass LegPatternPage extends Component {\n    pageName = SECTION_NAMES.legPatterns\n    state = { patternParams: DEFAULT_PATTERN_PARAMS }\n\n    componentDidMount = () => {\n        this.props.onMount(this.pageName)\n        this.reset()\n    }\n\n    reset = () => {\n        this.props.onUpdate(DEFAULT_POSE)\n        this.setState({ patternParams: DEFAULT_PATTERN_PARAMS })\n    }\n\n    updatePatternPose = (name, value) => {\n        const patternParams = { ...this.state.patternParams, [name]: Number(value) }\n        let newPose = {}\n\n        for (const leg in DEFAULT_POSE) {\n            newPose[leg] = patternParams\n        }\n\n        this.props.onUpdate(newPose)\n        this.setState({ patternParams })\n    }\n\n    get sliders() {\n        return sliderList({\n            names: ANGLE_NAMES,\n            values: this.state.patternParams,\n            handleChange: this.updatePatternPose,\n        })\n    }\n\n    render = () => (\n        <Card title={<h2>{this.pageName}</h2>}>\n            <div className=\"grid-cols-1\">{this.sliders}</div>\n            <ResetButton reset={this.reset} />\n        </Card>\n    )\n}\n\nexport default LegPatternPage\n","import { solveHexapodParams } from \"./ik/hexapodSolver\"\n\n/* * *\n\nReturn format:\n  poseSequence = {\n    leftMiddle: {\n        alpha: [],\n        beta: [],\n        gamma: [],\n    }\n    ....\n  }\n\n  gaitType = [\"ripple\", \"tripod\"]\n  walkMode = [\"rotating\", \"walking\"]\n  * * */\n\nconst getWalkSequence = (\n    dimensions,\n    params = {\n        tx: 0,\n        tz: 0,\n        rx: 0,\n        ry: 0,\n        legStance: 0,\n        hipStance: 25,\n        stepCount: 5,\n        hipSwing: 25,\n        liftSwing: 40,\n    },\n    gaitType = \"tripod\",\n    walkMode = \"walking\"\n) => {\n    const { hipStance, rx, ry, tx, tz, legStance } = params\n    const rawIKparams = {\n        tx,\n        ty: 0,\n        tz,\n        legStance,\n        hipStance,\n        rx,\n        ry,\n        rz: 0,\n    }\n\n    const [ikSolver] = solveHexapodParams(dimensions, rawIKparams, true)\n\n    if (!ikSolver.foundSolution || ikSolver.hasLegsOffGround) {\n        return null\n    }\n\n    const { hipSwing, liftSwing, stepCount } = params\n    const [aHipSwing, aLiftSwing] = [Math.abs(hipSwing), Math.abs(liftSwing)]\n\n    const hipSwings =\n        walkMode === \"rotating\"\n            ? getHipSwingRotate(aHipSwing)\n            : getHipSwingForward(aHipSwing)\n\n    return gaitType === \"ripple\"\n        ? rippleSequence(ikSolver.pose, aLiftSwing, hipSwings, stepCount)\n        : tripodSequence(ikSolver.pose, aLiftSwing, hipSwings, stepCount)\n}\n\n/* *\n\npowerStroke aka stancePhase\nreturnStroke aka swingPhase\n\n1. > startPowerStroke / endReturnStroke < 6.\n\n       \\\n        \\\n         *--*--*\n        /   |   \\   /\n       * -- * -- * /\n      \\ \\   |   /\n       \\ *--*--*\n\n2. > middlePowerStroke / middleReturnStroke < 5.\n\n     --- *--*--*\n        /   |   \\\n       * -- * -- * ---\n        \\   |   /\n    ---- *--*--*\n\n3. > endPowerStroke / startReturnStroke < 4.\n\n       / *--*--*\n      / /   |   \\\n       * -- * -- *\n        \\   |   / \\\n         *--*--*   \\\n       /\n      /\n\n TRIPOD1 - leftFront, rightMiddle, leftBack\n\n |----- powerStroke ----------|------- returnStroke -------|\n                              |-- liftUp --|-- shoveDown --|\n\n TRIPOD2 rightFront, leftMiddle, rightBack\n\n |------- returnStroke -------|----- powerStroke ----------|\n |-- liftUp --|-- shoveDown --|\n\n * */\nconst tripodSequence = (pose, aLiftSwing, hipSwings, stepCount, walkMode) => {\n    const { forwardAlphaSeqs, liftBetaSeqs, liftGammaSeqs } = buildTripodSequences(\n        pose,\n        aLiftSwing,\n        hipSwings,\n        stepCount,\n        walkMode\n    )\n\n    const doubleStepCount = 2 * stepCount\n\n    const tripodA = tripodASequence(\n        forwardAlphaSeqs,\n        liftGammaSeqs,\n        liftBetaSeqs,\n        doubleStepCount\n    )\n    const tripodB = tripodBSequence(\n        forwardAlphaSeqs,\n        liftGammaSeqs,\n        liftBetaSeqs,\n        doubleStepCount\n    )\n\n    return { ...tripodA, ...tripodB }\n}\n\nconst tripodASequence = (\n    forwardAlphaSeqs,\n    liftGammaSeqs,\n    liftBetaSeqs,\n    doubleStepCount\n) =>\n    [\"leftFront\", \"rightMiddle\", \"leftBack\"].reduce((sequences, legPosition) => {\n        const forward = forwardAlphaSeqs[legPosition]\n        const gammaLiftUp = liftGammaSeqs[legPosition]\n        const betaLiftUp = liftBetaSeqs[legPosition]\n\n        const gammaSeq = [\n            ...gammaLiftUp,\n            ...gammaLiftUp.slice().reverse(),\n            ...fillArray(gammaLiftUp[0], doubleStepCount),\n        ]\n\n        const betaSeq = [\n            ...betaLiftUp,\n            ...betaLiftUp.slice().reverse(),\n            ...fillArray(betaLiftUp[0], doubleStepCount),\n        ]\n\n        sequences[legPosition] = {\n            alpha: [...forward, ...forward.slice().reverse()],\n            gamma: gammaSeq,\n            beta: betaSeq,\n        }\n\n        return sequences\n    }, {})\n\nconst tripodBSequence = (\n    forwardAlphaSeqs,\n    liftGammaSeqs,\n    liftBetaSeqs,\n    doubleStepCount\n) =>\n    [\"rightFront\", \"leftMiddle\", \"rightBack\"].reduce((sequences, legPosition) => {\n        const forward = forwardAlphaSeqs[legPosition]\n        const gammaLiftUp = liftGammaSeqs[legPosition]\n        const betaLiftUp = liftBetaSeqs[legPosition]\n\n        const gammaSeq = [\n            ...fillArray(gammaLiftUp[0], doubleStepCount),\n            ...gammaLiftUp,\n            ...gammaLiftUp.slice().reverse(),\n        ]\n\n        const betaSeq = [\n            ...fillArray(betaLiftUp[0], doubleStepCount),\n            ...betaLiftUp,\n            ...betaLiftUp.slice().reverse(),\n        ]\n\n        sequences[legPosition] = {\n            alpha: [...forward.slice().reverse(), ...forward],\n            gamma: gammaSeq,\n            beta: betaSeq,\n        }\n\n        return sequences\n    }, {})\n\n/* * *\n\nRIPPLE SEQUENCE\na - lift-up\nb - shove-down\n[1, 2, 3, 4] - retract / power stroke sequence\n\nleft-back     |-- a --|-- b --|   1   |   2   |   3   |   4   |\nleft-middle   |   3   |   4   |-- a --|-- b --|   1   |   2   |\nleft-front    |   1   |   2   |   3   |   4   |-- a --|-- b --|\nright-front   |   4   |-- a --|-- b --|   1   |   2   |   3   |\nright-back    |   1   |   2   |   3   |-- a --|-- b --|   4   |\nright-middle  |-- b --|   1   |   2   |   3   |   4   |-- a --|\n\n * * */\n\nconst rippleSequence = (startPose, aLiftSwing, hipSwings, stepCount) => {\n    const legPositions = Object.keys(startPose)\n\n    let sequences = {}\n    legPositions.forEach(position => {\n        const { alpha, beta, gamma } = startPose[position]\n        const betaLift = buildSequence(beta, aLiftSwing, stepCount)\n        const gammaLift = buildSequence(gamma, -aLiftSwing / 2, stepCount)\n\n        const delta = hipSwings[position]\n        const fw1 = buildSequence(alpha - delta, delta, stepCount)\n        const fw2 = buildSequence(alpha, delta, stepCount)\n\n        const halfDelta = delta / 2\n        const bk1 = buildSequence(alpha + delta, -halfDelta, stepCount)\n        const bk2 = buildSequence(alpha + halfDelta, -halfDelta, stepCount)\n        const bk3 = buildSequence(alpha, -halfDelta, stepCount)\n        const bk4 = buildSequence(alpha - halfDelta, -halfDelta, stepCount)\n\n        // prettier-ignore\n        sequences[position] = buildRippleLegSequence(\n            position, betaLift, gammaLift, fw1, fw2, bk1, bk2, bk3, bk4\n        )\n    })\n\n    return sequences\n}\n\nconst buildRippleLegSequence = (position, bLift, gLift, fw1, fw2, bk1, bk2, bk3, bk4) => {\n    const stepCount = fw1.length\n    const revGLift = gLift.slice().reverse()\n    const revBLift = bLift.slice().reverse()\n    const b0 = bLift[0]\n    const g0 = gLift[0]\n    // n stands for neutral\n    const bN = fillArray(b0, stepCount)\n    const gN = fillArray(g0, stepCount)\n\n    const alphaSeq = [fw1, fw2, bk1, bk2, bk3, bk4]\n    const betaSeq = [bLift, revBLift, bN, bN, bN, bN]\n    const gammaSeq = [gLift, revGLift, gN, gN, gN, gN]\n\n    const moduloMap = {\n        leftBack: 0,\n        rightFront: 1,\n        leftMiddle: 2,\n        rightBack: 3,\n        leftFront: 4,\n        rightMiddle: 5,\n    }\n\n    return {\n        alpha: modSequence(moduloMap[position], alphaSeq),\n        beta: modSequence(moduloMap[position], betaSeq),\n        gamma: modSequence(moduloMap[position], gammaSeq),\n    }\n}\n\nconst modSequence = (mod, seq) => {\n    const sequence = [...seq, ...seq]\n    return sequence.slice(mod, mod + 6).flat()\n}\n\nconst buildTripodSequences = (startPose, aLiftSwing, hipSwings, stepCount, walkMode) => {\n    const doubleStepCount = 2 * stepCount\n    const legPositions = Object.keys(startPose)\n\n    let forwardAlphaSeqs = {}\n    let liftBetaSeqs = {}\n    let liftGammaSeqs = {}\n\n    legPositions.forEach(legPosition => {\n        const { alpha, beta, gamma } = startPose[legPosition]\n        const deltaAlpha = hipSwings[legPosition]\n        forwardAlphaSeqs[legPosition] = buildSequence(\n            alpha - deltaAlpha,\n            2 * deltaAlpha,\n            doubleStepCount\n        )\n        liftBetaSeqs[legPosition] = buildSequence(beta, aLiftSwing, stepCount)\n        liftGammaSeqs[legPosition] = buildSequence(gamma, -aLiftSwing / 2, stepCount)\n    })\n\n    return {\n        forwardAlphaSeqs,\n        liftBetaSeqs,\n        liftGammaSeqs,\n    }\n}\n\nconst buildSequence = (startVal, delta, stepCount) => {\n    const step = delta / stepCount\n\n    let currentItem = startVal\n    let array = []\n    for (let i = 0; i < stepCount; i++) {\n        currentItem += step\n        array.push(currentItem)\n    }\n\n    return array\n}\n\nconst getHipSwingForward = aHipSwing => {\n    return {\n        leftFront: -aHipSwing,\n        rightMiddle: aHipSwing,\n        leftBack: -aHipSwing,\n        rightFront: aHipSwing,\n        leftMiddle: -aHipSwing,\n        rightBack: aHipSwing,\n    }\n}\n\nconst getHipSwingRotate = aHipSwing => {\n    return {\n        leftFront: aHipSwing,\n        rightMiddle: aHipSwing,\n        leftBack: aHipSwing,\n        rightFront: aHipSwing,\n        leftMiddle: aHipSwing,\n        rightBack: aHipSwing,\n    }\n}\n\nconst fillArray = (value, len) => {\n    if (len === 0) {\n        return []\n    }\n    let a = [value]\n\n    while (a.length * 2 <= len) {\n        a = a.concat(a)\n    }\n\n    if (a.length < len) {\n        a = a.concat(a.slice(0, len - a.length))\n    }\n\n    return a\n}\n\nexport default getWalkSequence\n","import React, { Component } from \"react\"\nimport { sliderList, Card, ResetButton, ToggleSwitch } from \"../generic\"\nimport { SECTION_NAMES, GAIT_SLIDER_LABELS, GAIT_RANGE_PARAMS } from \"../vars\"\nimport getWalkSequence from \"../../hexapod/solvers/walkSequenceSolver\"\nimport PoseTable from \"./PoseTable\"\nimport { VirtualHexapod } from \"../../hexapod\"\nimport { tRotZmatrix } from \"../../hexapod/geometry\"\nimport { DEFAULT_GAIT_PARAMS } from \"../../templates\"\n\nconst ANIMATION_DELAY = 10\n\nconst getPose = (sequences, i) => {\n    return Object.keys(sequences).reduce((newSequences, legPosition) => {\n        const { alpha, beta, gamma } = sequences[legPosition]\n        newSequences[legPosition] = { alpha: alpha[i], beta: beta[i], gamma: gamma[i] }\n        return newSequences\n    }, {})\n}\n\nconst newSwitch = (id, value, handleChange) => (\n    <ToggleSwitch id={id} handleChange={handleChange} value={value} showValue={true} />\n)\n\nconst switches = (switch1, switch2, switch3) => (\n    <div className=\"grid-cols-3\" style={{ paddingBottom: \"20px\" }}>\n        {switch1}\n        {switch2}\n        {switch3}\n    </div>\n)\n\nconst countSteps = sequence => sequence[\"leftMiddle\"].alpha.length\n\nclass WalkingGaitsPage extends Component {\n    pageName = SECTION_NAMES.walkingGaits\n    currentTwist = 0\n    walkSequence = null\n    state = {\n        gaitParams: DEFAULT_GAIT_PARAMS,\n        isAnimating: false,\n        isTripodGait: true,\n        isForward: true,\n        inWalkMode: true,\n        showGaitWidgets: true,\n        animationCount: 0,\n    }\n\n    componentDidMount = () => {\n        this.props.onMount(this.pageName)\n        const { isTripodGait, inWalkMode } = this.state\n        this.setWalkSequence(DEFAULT_GAIT_PARAMS, isTripodGait, inWalkMode)\n    }\n\n    componentWillUnmount = () => {\n        clearInterval(this.intervalID)\n    }\n\n    animate = () => {\n        const { isForward, inWalkMode } = this.state\n\n        const stepCount = countSteps(this.walkSequence)\n        const animationCount = (this.state.animationCount + 1) % stepCount\n        this.setState({ animationCount })\n\n        const tempStep = isForward ? animationCount : stepCount - animationCount\n        const step = Math.max(0, Math.min(stepCount - 1, tempStep))\n\n        const pose = getPose(this.walkSequence, step)\n\n        if (inWalkMode) {\n            this.onUpdate(pose, this.currentTwist)\n            return\n        }\n\n        const deltaTwist = (this.state.gaitParams.hipSwing * 2) / stepCount\n        const twist = isForward\n            ? (this.currentTwist + deltaTwist) % 360\n            : (this.currentTwist - deltaTwist) % 360\n\n        this.onUpdate(pose, twist)\n    }\n\n    onUpdate = (pose, currentTwist) => {\n        this.currentTwist = currentTwist\n\n        const { dimensions } = this.props.params\n        const hexapod = new VirtualHexapod(dimensions, pose, { wontRotate: true })\n\n        // ❗❗️HACK When we've passed undefined pose values for some reason\n        if (!hexapod || !hexapod.body) {\n            return\n        }\n\n        const matrix = tRotZmatrix(currentTwist)\n        this.props.onUpdate(hexapod.cloneTrot(matrix))\n    }\n\n    setWalkSequence = (gaitParams, isTripodGait, inWalkMode) => {\n        const gaitType = isTripodGait ? \"tripod\" : \"ripple\"\n        const walkMode = inWalkMode ? \"walking\" : \"rotating\"\n\n        const { dimensions } = this.props.params\n        const { animationCount } = this.state\n\n        this.walkSequence =\n            getWalkSequence(dimensions, gaitParams, gaitType, walkMode) ||\n            this.walkSequence\n\n        const pose = getPose(this.walkSequence, animationCount)\n        this.onUpdate(pose, this.currentTwist)\n        this.setState({ gaitParams, isTripodGait, inWalkMode })\n    }\n\n    reset = () => {\n        const { isTripodGait, inWalkMode } = this.state\n        this.currentTwist = 0\n        this.setWalkSequence(DEFAULT_GAIT_PARAMS, isTripodGait, inWalkMode)\n    }\n\n    updateGaitParams = (name, value) => {\n        const { isTripodGait, inWalkMode } = this.state\n        const gaitParams = { ...this.state.gaitParams, [name]: value }\n        this.setWalkSequence(gaitParams, isTripodGait, inWalkMode)\n    }\n\n    toggleWalkMode = () => {\n        const { gaitParams, isTripodGait } = this.state\n        const inWalkMode = !this.state.inWalkMode\n        this.setWalkSequence(gaitParams, isTripodGait, inWalkMode)\n    }\n\n    toggleGaitType = () => {\n        const { gaitParams, inWalkMode } = this.state\n        const isTripodGait = !this.state.isTripodGait\n        this.setWalkSequence(gaitParams, isTripodGait, inWalkMode)\n    }\n\n    toggleWidgets = () => this.setState({ showGaitWidgets: !this.state.showGaitWidgets })\n\n    toggleDirection = () => this.setState({ isForward: !this.state.isForward })\n\n    toggleAnimating = () => {\n        const isAnimating = !this.state.isAnimating\n        this.setState({ isAnimating })\n\n        if (isAnimating) {\n            this.intervalID = setInterval(this.animate, ANIMATION_DELAY)\n        } else {\n            clearInterval(this.intervalID)\n        }\n    }\n\n    get widgetsSwitch() {\n        const value = this.state.showGaitWidgets ? \"controlsShown\" : \"poseShown\"\n        return newSwitch(\"widgetSw\", value, this.toggleWidgets)\n    }\n\n    get animatingSwitch() {\n        const value = this.state.isAnimating ? \"PLAYING...\" : \"...PAUSED. \"\n        return newSwitch(\"animatingSw\", value, this.toggleAnimating)\n    }\n\n    get gaitTypeSwitch() {\n        const value = this.state.isTripodGait ? \"tripodGait\" : \"rippleGait\"\n        return newSwitch(\"gaitSw\", value, this.toggleGaitType)\n    }\n\n    get directionSwitch() {\n        const value = this.state.isForward ? \"isForward\" : \"isBackward\"\n        return newSwitch(\"directionSw\", value, this.toggleDirection)\n    }\n\n    get rotateSwitch() {\n        const value = this.state.inWalkMode ? \"isWalk\" : \"isRotate\"\n        return newSwitch(\"rotateSw\", value, this.toggleWalkMode)\n    }\n\n    get sliders() {\n        const sliders = sliderList({\n            names: GAIT_SLIDER_LABELS,\n            values: this.state.gaitParams,\n            rangeParams: GAIT_RANGE_PARAMS,\n            handleChange: this.updateGaitParams,\n        })\n\n        return <div className=\"grid-cols-2\">{sliders}</div>\n    }\n\n    get animationCount() {\n        const { isAnimating, animationCount } = this.state\n        return (\n            <div className=\"text\" hidden={!isAnimating}>\n                {animationCount}\n            </div>\n        )\n    }\n\n    render() {\n        const animationControlSwitches = switches(\n            this.animatingSwitch,\n            this.widgetsSwitch\n        )\n        const gaitControlSwitches = switches(\n            this.gaitTypeSwitch,\n            this.directionSwitch,\n            this.rotateSwitch\n        )\n\n        const { showGaitWidgets } = this.state\n        const { pose } = this.props.params\n\n        return (\n            <Card title={<h2>{this.pageName}</h2>} other={this.animationCount}>\n                {animationControlSwitches}\n\n                <div hidden={!showGaitWidgets}>\n                    {gaitControlSwitches}\n                    {this.sliders}\n                    <ResetButton reset={this.reset} />\n                </div>\n\n                <div hidden={showGaitWidgets}>\n                    <PoseTable pose={pose} />\n                </div>\n            </Card>\n        )\n    }\n}\n\nexport default WalkingGaitsPage\n","import React from \"react\"\nimport { HashRouter as Router, Route, Switch, Redirect } from \"react-router-dom\"\nimport ReactGA from \"react-ga\"\nimport { VirtualHexapod, getNewPlotParams } from \"./hexapod\"\nimport * as defaults from \"./templates\"\nimport { SECTION_NAMES, PATHS } from \"./components/vars\"\nimport { Nav, NavDetailed, HexapodPlot, DimensionsWidget } from \"./components\"\nimport {\n    ForwardKinematicsPage,\n    InverseKinematicsPage,\n    LandingPage,\n    LegPatternPage,\n    WalkingGaitsPage,\n} from \"./components/pages\"\n\nReactGA.initialize(\"UA-170794768-1\", {\n    debug: true,\n    testMode: process.env.NODE_ENV === 'test',\n    gaOptions: { siteSpeedSampleRate: 100 },\n})\n\nclass App extends React.Component {\n    plot = {\n        cameraView: defaults.CAMERA_VIEW,\n        data: defaults.DATA,\n        layout: defaults.LAYOUT,\n    }\n\n    state = {\n        inHexapodPage: false,\n        hexapodDimensions: defaults.DEFAULT_DIMENSIONS,\n        hexapodPose: defaults.DEFAULT_POSE,\n        revision: 0,\n    }\n\n    /* * * * * * * * * * * * * *\n     * Page load and plot update handlers\n     * * * * * * * * * * * * * */\n\n    onPageLoad = pageName => {\n        ReactGA.pageview(window.location.pathname + window.location.search)\n\n        if (pageName === SECTION_NAMES.landingPage) {\n            this.setState({ inHexapodPage: false })\n            return\n        }\n\n        this.setState({ inHexapodPage: true })\n        this.updatePlot(this.state.hexapodDimensions, defaults.DEFAULT_POSE)\n    }\n\n    updatePlotWithHexapod = hexapod => {\n        if (!hexapod || !hexapod.foundSolution) {\n            return\n        }\n\n        const [data, layout] = getNewPlotParams(hexapod, this.plot.cameraView)\n        this.plot = { ...this.plot, data, layout }\n\n        this.setState({\n            revision: this.state.revision + 1,\n            hexapodDimensions: hexapod.dimensions,\n            hexapodPose: hexapod.pose,\n        })\n    }\n\n    logCameraView = relayoutData => {\n        this.plot.cameraView = relayoutData[\"scene.camera\"]\n    }\n\n    updatePlot = (dimensions, pose) => {\n        const newHexapodModel = new VirtualHexapod(dimensions, pose)\n        this.updatePlotWithHexapod(newHexapodModel)\n    }\n\n    updateDimensions = dimensions => this.updatePlot(dimensions, this.state.hexapodPose)\n\n    updatePose = pose => this.updatePlot(this.state.hexapodDimensions, pose)\n\n    /* * * * * * * * * * * * * *\n     * Widgets\n     * * * * * * * * * * * * * */\n\n    hexapodPlot = () => {\n        const { revision, inHexapodPage } = this.state\n        const { data, layout } = this.plot\n        const props = { data, layout, revision, onRelayout: this.logCameraView }\n\n        return (\n            <div hidden={!inHexapodPage} className=\"plot border\">\n                <HexapodPlot {...props} />\n            </div>\n        )\n    }\n\n    dimensions = () => (\n        <div hidden={!this.state.inHexapodPage}>\n            <DimensionsWidget\n                params={{ dimensions: this.state.hexapodDimensions }}\n                onUpdate={this.updateDimensions}\n            />\n        </div>\n    )\n\n    navDetailed = () => (\n        <div hidden={!this.state.inHexapodPage}>\n            <NavDetailed />\n        </div>\n    )\n\n    /* * * * * * * * * * * * * *\n     * Pages\n     * * * * * * * * * * * * * */\n    get hexapodParams() {\n        return {\n            dimensions: this.state.hexapodDimensions,\n            pose: this.state.hexapodPose,\n        }\n    }\n\n    pageComponent = (Component, onUpdate, params) => (\n        <Component onMount={this.onPageLoad} onUpdate={onUpdate} params={params} />\n    )\n\n    pageLanding = () => this.pageComponent(LandingPage)\n\n    pagePatterns = () => this.pageComponent(LegPatternPage, this.updatePose)\n\n    pageIk = () =>\n        this.pageComponent(\n            InverseKinematicsPage,\n            this.updatePlotWithHexapod,\n            this.hexapodParams\n        )\n\n    pageFk = () =>\n        this.pageComponent(ForwardKinematicsPage, this.updatePose, {\n            pose: this.state.hexapodPose,\n        })\n\n    pageWalking = () =>\n        this.pageComponent(\n            WalkingGaitsPage,\n            this.updatePlotWithHexapod,\n            this.hexapodParams\n        )\n\n    page = () => (\n        <Switch>\n            <Route path=\"/\" exact component={this.pageLanding} />\n            <Route path={PATHS.legPatterns.path} exact component={this.pagePatterns} />\n            <Route path={PATHS.forwardKinematics.path} exact component={this.pageFk} />\n            <Route path={PATHS.inverseKinematics.path} exact component={this.pageIk} />\n            <Route path={PATHS.walkingGaits.path} exact component={this.pageWalking} />\n            <Route>\n                <Redirect to=\"/\" />\n            </Route>\n        </Switch>\n    )\n\n    /* * * * * * * * * * * * * *\n     * Layout\n     * * * * * * * * * * * * * */\n\n    render = () => (\n        <Router>\n            <Nav />\n            <div className=\"main content\">\n                <div className=\"sidebar column-container cell\">\n                    {this.dimensions()}\n                    {this.page()}\n                </div>\n                {this.hexapodPlot()}\n            </div>\n            {this.navDetailed()}\n        </Router>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\")\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\")\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\")\n        })\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}